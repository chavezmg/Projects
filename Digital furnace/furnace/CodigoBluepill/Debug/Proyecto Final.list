
Proyecto Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004d48  08004d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dbc  08004dbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004dbc  08004dbc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dbc  08004dbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dc0  08004dc0  00014dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000070  08004e34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08004e34  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d118  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218f  00000000  00000000  0002d1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  0002f340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00030138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001879e  00000000  00000000  00030e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecff  00000000  00000000  000495f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f976  00000000  00000000  000582f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7c6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e2c  00000000  00000000  000e7cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d30 	.word	0x08004d30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004d30 	.word	0x08004d30

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fd42 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f830 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f9fc 	bl	8000564 <MX_GPIO_Init>
  MX_DMA_Init();
 800016c:	f000 f9dc 	bl	8000528 <MX_DMA_Init>
  MX_ADC1_Init();
 8000170:	f000 f886 	bl	8000280 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000174:	f000 f962 	bl	800043c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000178:	f000 f9ac 	bl	80004d4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800017c:	f000 f8be 	bl	80002fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, &valoradc, 1);
 8000180:	2201      	movs	r2, #1
 8000182:	490a      	ldr	r1, [pc, #40]	; (80001ac <main+0x50>)
 8000184:	480a      	ldr	r0, [pc, #40]	; (80001b0 <main+0x54>)
 8000186:	f000 ff17 	bl	8000fb8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 800018a:	480a      	ldr	r0, [pc, #40]	; (80001b4 <main+0x58>)
 800018c:	f002 fd6a 	bl	8002c64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000190:	2100      	movs	r1, #0
 8000192:	4809      	ldr	r0, [pc, #36]	; (80001b8 <main+0x5c>)
 8000194:	f002 fe10 	bl	8002db8 <HAL_TIM_PWM_Start>
  TIM1->CCR1 =30000;
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <main+0x60>)
 800019a:	f247 5230 	movw	r2, #30000	; 0x7530
 800019e:	635a      	str	r2, [r3, #52]	; 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, dataserial2, 4);
 80001a0:	2204      	movs	r2, #4
 80001a2:	4907      	ldr	r1, [pc, #28]	; (80001c0 <main+0x64>)
 80001a4:	4807      	ldr	r0, [pc, #28]	; (80001c4 <main+0x68>)
 80001a6:	f003 fd09 	bl	8003bbc <HAL_UART_Receive_IT>
  while (1)
 80001aa:	e7fe      	b.n	80001aa <main+0x4e>
 80001ac:	200001d4 	.word	0x200001d4
 80001b0:	2000008c 	.word	0x2000008c
 80001b4:	20000148 	.word	0x20000148
 80001b8:	20000100 	.word	0x20000100
 80001bc:	40012c00 	.word	0x40012c00
 80001c0:	200001d8 	.word	0x200001d8
 80001c4:	20000190 	.word	0x20000190

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b094      	sub	sp, #80	; 0x50
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f004 f928 	bl	800442c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	f107 0314 	add.w	r3, r7, #20
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	609a      	str	r2, [r3, #8]
 80001e8:	60da      	str	r2, [r3, #12]
 80001ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f8:	2301      	movs	r3, #1
 80001fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000200:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020a:	2302      	movs	r3, #2
 800020c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000214:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000218:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021e:	4618      	mov	r0, r3
 8000220:	f002 f800 	bl	8002224 <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800022a:	f000 fad3 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2102      	movs	r1, #2
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fa6c 	bl	8002728 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000256:	f000 fabd 	bl	80007d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800025a:	2302      	movs	r3, #2
 800025c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800025e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000262:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fbf6 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000272:	f000 faaf 	bl	80007d4 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3750      	adds	r7, #80	; 0x50
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000290:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <MX_ADC1_Init+0x74>)
 8000292:	4a19      	ldr	r2, [pc, #100]	; (80002f8 <MX_ADC1_Init+0x78>)
 8000294:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000296:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <MX_ADC1_Init+0x74>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800029c:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <MX_ADC1_Init+0x74>)
 800029e:	2201      	movs	r2, #1
 80002a0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002a2:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <MX_ADC1_Init+0x74>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <MX_ADC1_Init+0x74>)
 80002aa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b0:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <MX_ADC1_Init+0x74>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <MX_ADC1_Init+0x74>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <MX_ADC1_Init+0x74>)
 80002be:	f000 fcf5 	bl	8000cac <HAL_ADC_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002c8:	f000 fa84 	bl	80007d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002cc:	2301      	movs	r3, #1
 80002ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d0:	2301      	movs	r3, #1
 80002d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002d4:	2307      	movs	r3, #7
 80002d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4619      	mov	r1, r3
 80002dc:	4805      	ldr	r0, [pc, #20]	; (80002f4 <MX_ADC1_Init+0x74>)
 80002de:	f001 f83d 	bl	800135c <HAL_ADC_ConfigChannel>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002e8:	f000 fa74 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	2000008c 	.word	0x2000008c
 80002f8:	40012400 	.word	0x40012400

080002fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b096      	sub	sp, #88	; 0x58
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000302:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000310:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800031a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]
 800032a:	615a      	str	r2, [r3, #20]
 800032c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2220      	movs	r2, #32
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f004 f879 	bl	800442c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800033a:	4b3e      	ldr	r3, [pc, #248]	; (8000434 <MX_TIM1_Init+0x138>)
 800033c:	4a3e      	ldr	r2, [pc, #248]	; (8000438 <MX_TIM1_Init+0x13c>)
 800033e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000340:	4b3c      	ldr	r3, [pc, #240]	; (8000434 <MX_TIM1_Init+0x138>)
 8000342:	2200      	movs	r2, #0
 8000344:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000346:	4b3b      	ldr	r3, [pc, #236]	; (8000434 <MX_TIM1_Init+0x138>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800034c:	4b39      	ldr	r3, [pc, #228]	; (8000434 <MX_TIM1_Init+0x138>)
 800034e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000352:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000354:	4b37      	ldr	r3, [pc, #220]	; (8000434 <MX_TIM1_Init+0x138>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800035a:	4b36      	ldr	r3, [pc, #216]	; (8000434 <MX_TIM1_Init+0x138>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000360:	4b34      	ldr	r3, [pc, #208]	; (8000434 <MX_TIM1_Init+0x138>)
 8000362:	2200      	movs	r2, #0
 8000364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000366:	4833      	ldr	r0, [pc, #204]	; (8000434 <MX_TIM1_Init+0x138>)
 8000368:	f002 fc2c 	bl	8002bc4 <HAL_TIM_Base_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000372:	f000 fa2f 	bl	80007d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800037c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000380:	4619      	mov	r1, r3
 8000382:	482c      	ldr	r0, [pc, #176]	; (8000434 <MX_TIM1_Init+0x138>)
 8000384:	f002 ff80 	bl	8003288 <HAL_TIM_ConfigClockSource>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800038e:	f000 fa21 	bl	80007d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000392:	4828      	ldr	r0, [pc, #160]	; (8000434 <MX_TIM1_Init+0x138>)
 8000394:	f002 fcb8 	bl	8002d08 <HAL_TIM_PWM_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800039e:	f000 fa19 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a2:	2300      	movs	r3, #0
 80003a4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a6:	2300      	movs	r3, #0
 80003a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003ae:	4619      	mov	r1, r3
 80003b0:	4820      	ldr	r0, [pc, #128]	; (8000434 <MX_TIM1_Init+0x138>)
 80003b2:	f003 faf5 	bl	80039a0 <HAL_TIMEx_MasterConfigSynchronization>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80003bc:	f000 fa0a 	bl	80007d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c0:	2360      	movs	r3, #96	; 0x60
 80003c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003c8:	2300      	movs	r3, #0
 80003ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003cc:	2300      	movs	r3, #0
 80003ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003d4:	2300      	movs	r3, #0
 80003d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003d8:	2300      	movs	r3, #0
 80003da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003e0:	2200      	movs	r2, #0
 80003e2:	4619      	mov	r1, r3
 80003e4:	4813      	ldr	r0, [pc, #76]	; (8000434 <MX_TIM1_Init+0x138>)
 80003e6:	f002 fe91 	bl	800310c <HAL_TIM_PWM_ConfigChannel>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80003f0:	f000 f9f0 	bl	80007d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800040c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800040e:	2300      	movs	r3, #0
 8000410:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	4619      	mov	r1, r3
 8000416:	4807      	ldr	r0, [pc, #28]	; (8000434 <MX_TIM1_Init+0x138>)
 8000418:	f003 fb20 	bl	8003a5c <HAL_TIMEx_ConfigBreakDeadTime>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000422:	f000 f9d7 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000426:	4803      	ldr	r0, [pc, #12]	; (8000434 <MX_TIM1_Init+0x138>)
 8000428:	f000 faa4 	bl	8000974 <HAL_TIM_MspPostInit>

}
 800042c:	bf00      	nop
 800042e:	3758      	adds	r7, #88	; 0x58
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000100 	.word	0x20000100
 8000438:	40012c00 	.word	0x40012c00

0800043c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000450:	463b      	mov	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000458:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <MX_TIM2_Init+0x94>)
 800045a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800045e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_TIM2_Init+0x94>)
 8000462:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000466:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <MX_TIM2_Init+0x94>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_TIM2_Init+0x94>)
 8000470:	22c8      	movs	r2, #200	; 0xc8
 8000472:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <MX_TIM2_Init+0x94>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MX_TIM2_Init+0x94>)
 800047c:	2280      	movs	r2, #128	; 0x80
 800047e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000480:	4813      	ldr	r0, [pc, #76]	; (80004d0 <MX_TIM2_Init+0x94>)
 8000482:	f002 fb9f 	bl	8002bc4 <HAL_TIM_Base_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800048c:	f000 f9a2 	bl	80007d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000496:	f107 0308 	add.w	r3, r7, #8
 800049a:	4619      	mov	r1, r3
 800049c:	480c      	ldr	r0, [pc, #48]	; (80004d0 <MX_TIM2_Init+0x94>)
 800049e:	f002 fef3 	bl	8003288 <HAL_TIM_ConfigClockSource>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004a8:	f000 f994 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ac:	2300      	movs	r3, #0
 80004ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b4:	463b      	mov	r3, r7
 80004b6:	4619      	mov	r1, r3
 80004b8:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_TIM2_Init+0x94>)
 80004ba:	f003 fa71 	bl	80039a0 <HAL_TIMEx_MasterConfigSynchronization>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004c4:	f000 f986 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	3718      	adds	r7, #24
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000148 	.word	0x20000148

080004d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 80004da:	4a12      	ldr	r2, [pc, #72]	; (8000524 <MX_USART1_UART_Init+0x50>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 80004e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 800050c:	f003 fb09 	bl	8003b22 <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000516:	f000 f95d 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000190 	.word	0x20000190
 8000524:	40013800 	.word	0x40013800

08000528 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_DMA_Init+0x38>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <MX_DMA_Init+0x38>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_DMA_Init+0x38>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	200b      	movs	r0, #11
 800054c:	f001 f9df 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000550:	200b      	movs	r0, #11
 8000552:	f001 f9f8 	bl	8001946 <HAL_NVIC_EnableIRQ>

}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <MX_GPIO_Init+0xc8>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a2b      	ldr	r2, [pc, #172]	; (800062c <MX_GPIO_Init+0xc8>)
 800057e:	f043 0320 	orr.w	r3, r3, #32
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b29      	ldr	r3, [pc, #164]	; (800062c <MX_GPIO_Init+0xc8>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0320 	and.w	r3, r3, #32
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <MX_GPIO_Init+0xc8>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a25      	ldr	r2, [pc, #148]	; (800062c <MX_GPIO_Init+0xc8>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <MX_GPIO_Init+0xc8>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <MX_GPIO_Init+0xc8>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a1f      	ldr	r2, [pc, #124]	; (800062c <MX_GPIO_Init+0xc8>)
 80005ae:	f043 0308 	orr.w	r3, r3, #8
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <MX_GPIO_Init+0xc8>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0308 	and.w	r3, r3, #8
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	481a      	ldr	r0, [pc, #104]	; (8000630 <MX_GPIO_Init+0xcc>)
 80005c6:	f001 fdfb 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2103      	movs	r1, #3
 80005ce:	4819      	ldr	r0, [pc, #100]	; (8000634 <MX_GPIO_Init+0xd0>)
 80005d0:	f001 fdf6 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80005d4:	2360      	movs	r3, #96	; 0x60
 80005d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	4812      	ldr	r0, [pc, #72]	; (8000630 <MX_GPIO_Init+0xcc>)
 80005e8:	f001 fc66 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	4619      	mov	r1, r3
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <MX_GPIO_Init+0xcc>)
 8000604:	f001 fc58 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000608:	2303      	movs	r3, #3
 800060a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2302      	movs	r3, #2
 8000616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_GPIO_Init+0xd0>)
 8000620:	f001 fc4a 	bl	8001eb8 <HAL_GPIO_Init>

}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000
 8000630:	40010800 	.word	0x40010800
 8000634:	40010c00 	.word	0x40010c00

08000638 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM2){
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000648:	d10e      	bne.n	8000668 <HAL_TIM_PeriodElapsedCallback+0x30>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800064a:	2101      	movs	r1, #1
 800064c:	4808      	ldr	r0, [pc, #32]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800064e:	f001 fdcf 	bl	80021f0 <HAL_GPIO_TogglePin>

	    //Toma la lectura del ADC
	    HAL_ADC_Start(&hadc1);
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000654:	f000 fc02 	bl	8000e5c <HAL_ADC_Start>
	    valoradc = HAL_ADC_GetValue(&hadc1);
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800065a:	f000 fd8b 	bl	8001174 <HAL_ADC_GetValue>
 800065e:	4603      	mov	r3, r0
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000662:	6013      	str	r3, [r2, #0]

		//mandarDatos();
		resistencia(); // Salida de la resistencia
 8000664:	f000 f83c 	bl	80006e0 <resistencia>
	}
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40010c00 	.word	0x40010c00
 8000674:	2000008c 	.word	0x2000008c
 8000678:	200001d4 	.word	0x200001d4

0800067c <HAL_UART_RxCpltCallback>:
	HAL_UART_Transmit_IT(&huart1, (uint8_t*)enviarDatos, strlen(enviarDatos));
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af02      	add	r7, sp, #8
 8000682:	6078      	str	r0, [r7, #4]
	//este funcion se ejecuta cuando se reciben datos
	//HAL_UART_Transmit(&huart1, dataserial2, sizeof(dataserial2), HAL_MAX_DELAY);

	sprintf(buffer, "%c%c%c", dataserial2[0], dataserial2[1], dataserial2[2]);
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <HAL_UART_RxCpltCallback+0x50>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <HAL_UART_RxCpltCallback+0x50>)
 800068c:	785b      	ldrb	r3, [r3, #1]
 800068e:	4619      	mov	r1, r3
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <HAL_UART_RxCpltCallback+0x50>)
 8000692:	789b      	ldrb	r3, [r3, #2]
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	460b      	mov	r3, r1
 8000698:	490d      	ldr	r1, [pc, #52]	; (80006d0 <HAL_UART_RxCpltCallback+0x54>)
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <HAL_UART_RxCpltCallback+0x58>)
 800069c:	f003 fece 	bl	800443c <siprintf>
	int result = conversor(buffer);
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <HAL_UART_RxCpltCallback+0x58>)
 80006a2:	f000 f857 	bl	8000754 <conversor>
 80006a6:	60f8      	str	r0, [r7, #12]

	if(result == 999){
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d103      	bne.n	80006ba <HAL_UART_RxCpltCallback+0x3e>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80006b2:	2102      	movs	r1, #2
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <HAL_UART_RxCpltCallback+0x5c>)
 80006b6:	f001 fd9b 	bl	80021f0 <HAL_GPIO_TogglePin>
	}


	HAL_UART_Receive_IT(&huart1, dataserial2, 4);
 80006ba:	2204      	movs	r2, #4
 80006bc:	4903      	ldr	r1, [pc, #12]	; (80006cc <HAL_UART_RxCpltCallback+0x50>)
 80006be:	4807      	ldr	r0, [pc, #28]	; (80006dc <HAL_UART_RxCpltCallback+0x60>)
 80006c0:	f003 fa7c 	bl	8003bbc <HAL_UART_Receive_IT>
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200001d8 	.word	0x200001d8
 80006d0:	08004d58 	.word	0x08004d58
 80006d4:	200001dc 	.word	0x200001dc
 80006d8:	40010c00 	.word	0x40010c00
 80006dc:	20000190 	.word	0x20000190

080006e0 <resistencia>:



void resistencia(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80006e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <resistencia+0x20>)
 80006ea:	f001 fd81 	bl	80021f0 <HAL_GPIO_TogglePin>
	TIM1->CCR1 +=500;
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <resistencia+0x24>)
 80006f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f2:	4a04      	ldr	r2, [pc, #16]	; (8000704 <resistencia+0x24>)
 80006f4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80006f8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40010800 	.word	0x40010800
 8000704:	40012c00 	.word	0x40012c00

08000708 <power>:

int power(int num, int pow){
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
    if (pow==0){
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d101      	bne.n	800071c <power+0x14>
        return 1;
 8000718:	2301      	movs	r3, #1
 800071a:	e016      	b.n	800074a <power+0x42>
    }
    else if (pow<0){
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	da01      	bge.n	8000726 <power+0x1e>
        return 0;
 8000722:	2300      	movs	r3, #0
 8000724:	e011      	b.n	800074a <power+0x42>
    }

    int result=1;
 8000726:	2301      	movs	r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<pow; i++){
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	e007      	b.n	8000740 <power+0x38>
        result *= num;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	fb02 f303 	mul.w	r3, r2, r3
 8000738:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<pow; i++){
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	3301      	adds	r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	dbf3      	blt.n	8000730 <power+0x28>
    }
    return result;
 8000748:	68fb      	ldr	r3, [r7, #12]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <conversor>:

int conversor(char dato[]){
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    int num1,num2,num3;
    int tam_num;

    tam_num = strlen(dato);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff fcf5 	bl	800014c <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	617b      	str	r3, [r7, #20]

    num1 = ((int)dato[0]-48)*power(10, tam_num-1);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	3b01      	subs	r3, #1
 8000772:	4619      	mov	r1, r3
 8000774:	200a      	movs	r0, #10
 8000776:	f7ff ffc7 	bl	8000708 <power>
 800077a:	4603      	mov	r3, r0
 800077c:	fb04 f303 	mul.w	r3, r4, r3
 8000780:	613b      	str	r3, [r7, #16]
    num2 = ((int)dato[1]-48)*power(10, tam_num-2);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3301      	adds	r3, #1
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3b02      	subs	r3, #2
 8000790:	4619      	mov	r1, r3
 8000792:	200a      	movs	r0, #10
 8000794:	f7ff ffb8 	bl	8000708 <power>
 8000798:	4603      	mov	r3, r0
 800079a:	fb04 f303 	mul.w	r3, r4, r3
 800079e:	60fb      	str	r3, [r7, #12]
    num3 = ((int)dato[2]-48)*power(10, tam_num-3);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3302      	adds	r3, #2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	4619      	mov	r1, r3
 80007b0:	200a      	movs	r0, #10
 80007b2:	f7ff ffa9 	bl	8000708 <power>
 80007b6:	4603      	mov	r3, r0
 80007b8:	fb04 f303 	mul.w	r3, r4, r3
 80007bc:	60bb      	str	r3, [r7, #8]
    //num4 = ((int)dato[3]-48)*power(10, tam_num-4);
    num1 = num1+num2+num3;
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4413      	add	r3, r2
 80007c4:	68ba      	ldr	r2, [r7, #8]
 80007c6:	4413      	add	r3, r2
 80007c8:	613b      	str	r3, [r7, #16]
    return num1;
 80007ca:	693b      	ldr	r3, [r7, #16]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd90      	pop	{r4, r7, pc}

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_MspInit+0x40>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <HAL_MspInit+0x40>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <HAL_MspInit+0x40>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_MspInit+0x40>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_MspInit+0x40>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	61d3      	str	r3, [r2, #28]
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_MspInit+0x40>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <HAL_ADC_MspInit+0xcc>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d151      	bne.n	80008e8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <HAL_ADC_MspInit+0xd0>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a2a      	ldr	r2, [pc, #168]	; (80008f4 <HAL_ADC_MspInit+0xd0>)
 800084a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <HAL_ADC_MspInit+0xd0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <HAL_ADC_MspInit+0xd0>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a24      	ldr	r2, [pc, #144]	; (80008f4 <HAL_ADC_MspInit+0xd0>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <HAL_ADC_MspInit+0xd0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000874:	2302      	movs	r3, #2
 8000876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000878:	2303      	movs	r3, #3
 800087a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	481d      	ldr	r0, [pc, #116]	; (80008f8 <HAL_ADC_MspInit+0xd4>)
 8000884:	f001 fb18 	bl	8001eb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <HAL_ADC_MspInit+0xd8>)
 800088a:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <HAL_ADC_MspInit+0xdc>)
 800088c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <HAL_ADC_MspInit+0xd8>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_ADC_MspInit+0xd8>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_ADC_MspInit+0xd8>)
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_ADC_MspInit+0xd8>)
 80008a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_ADC_MspInit+0xd8>)
 80008aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_ADC_MspInit+0xd8>)
 80008b2:	2220      	movs	r2, #32
 80008b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_ADC_MspInit+0xd8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008bc:	480f      	ldr	r0, [pc, #60]	; (80008fc <HAL_ADC_MspInit+0xd8>)
 80008be:	f001 f85d 	bl	800197c <HAL_DMA_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80008c8:	f7ff ff84 	bl	80007d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <HAL_ADC_MspInit+0xd8>)
 80008d0:	621a      	str	r2, [r3, #32]
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_ADC_MspInit+0xd8>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2012      	movs	r0, #18
 80008de:	f001 f816 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80008e2:	2012      	movs	r0, #18
 80008e4:	f001 f82f 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40012400 	.word	0x40012400
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010800 	.word	0x40010800
 80008fc:	200000bc 	.word	0x200000bc
 8000900:	40020008 	.word	0x40020008

08000904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a16      	ldr	r2, [pc, #88]	; (800096c <HAL_TIM_Base_MspInit+0x68>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d10c      	bne.n	8000930 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_TIM_Base_MspInit+0x6c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <HAL_TIM_Base_MspInit+0x6c>)
 800091c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <HAL_TIM_Base_MspInit+0x6c>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800092e:	e018      	b.n	8000962 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000938:	d113      	bne.n	8000962 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_TIM_Base_MspInit+0x6c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <HAL_TIM_Base_MspInit+0x6c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_TIM_Base_MspInit+0x6c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	201c      	movs	r0, #28
 8000958:	f000 ffd9 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800095c:	201c      	movs	r0, #28
 800095e:	f000 fff2 	bl	8001946 <HAL_NVIC_EnableIRQ>
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40012c00 	.word	0x40012c00
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <HAL_TIM_MspPostInit+0x5c>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d118      	bne.n	80009c6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <HAL_TIM_MspPostInit+0x60>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <HAL_TIM_MspPostInit+0x60>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <HAL_TIM_MspPostInit+0x60>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <HAL_TIM_MspPostInit+0x64>)
 80009c2:	f001 fa79 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3720      	adds	r7, #32
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010800 	.word	0x40010800

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a20      	ldr	r2, [pc, #128]	; (8000a78 <HAL_UART_MspInit+0x9c>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d139      	bne.n	8000a70 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <HAL_UART_MspInit+0xa0>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <HAL_UART_MspInit+0xa0>)
 8000a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_UART_MspInit+0xa0>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_UART_MspInit+0xa0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <HAL_UART_MspInit+0xa0>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_UART_MspInit+0xa0>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480f      	ldr	r0, [pc, #60]	; (8000a80 <HAL_UART_MspInit+0xa4>)
 8000a42:	f001 fa39 	bl	8001eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <HAL_UART_MspInit+0xa4>)
 8000a5c:	f001 fa2c 	bl	8001eb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2025      	movs	r0, #37	; 0x25
 8000a66:	f000 ff52 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a6a:	2025      	movs	r0, #37	; 0x25
 8000a6c:	f000 ff6b 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40013800 	.word	0x40013800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010800 	.word	0x40010800

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aca:	f000 f8d3 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <DMA1_Channel1_IRQHandler+0x10>)
 8000ada:	f001 f8b9 	bl	8001c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000bc 	.word	0x200000bc

08000ae8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <ADC1_2_IRQHandler+0x10>)
 8000aee:	f000 fb4d 	bl	800118c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000008c 	.word	0x2000008c

08000afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <TIM2_IRQHandler+0x10>)
 8000b02:	f002 f9fb 	bl	8002efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000148 	.word	0x20000148

08000b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <USART1_IRQHandler+0x10>)
 8000b16:	f003 f881 	bl	8003c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000190 	.word	0x20000190

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b54:	f003 fc40 	bl	80043d8 <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20005000 	.word	0x20005000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	20000240 	.word	0x20000240
 8000b8c:	20000258 	.word	0x20000258

08000b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	; (8000be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bc2:	f7ff ffe5 	bl	8000b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f003 fc0d 	bl	80043e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bca:	f7ff fac7 	bl	800015c <main>
  bx lr
 8000bce:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bd8:	08004dc4 	.word	0x08004dc4
  ldr r2, =_sbss
 8000bdc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000be0:	20000258 	.word	0x20000258

08000be4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <CAN1_RX1_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_Init+0x28>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_Init+0x28>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 fe7d 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fdec 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fe95 	bl	8001962 <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 fe5d 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x20>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <HAL_IncTick+0x20>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000244 	.word	0x20000244

08000c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <HAL_GetTick+0x10>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000244 	.word	0x20000244

08000cac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e0be      	b.n	8000e4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d109      	bne.n	8000cf0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff fd9a 	bl	8000824 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 fc85 	bl	8001600 <ADC_ConversionStop_Disable>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8099 	bne.w	8000e3a <HAL_ADC_Init+0x18e>
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 8095 	bne.w	8000e3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d18:	f023 0302 	bic.w	r3, r3, #2
 8000d1c:	f043 0202 	orr.w	r2, r3, #2
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7b1b      	ldrb	r3, [r3, #12]
 8000d32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d44:	d003      	beq.n	8000d4e <HAL_ADC_Init+0xa2>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d102      	bne.n	8000d54 <HAL_ADC_Init+0xa8>
 8000d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d52:	e000      	b.n	8000d56 <HAL_ADC_Init+0xaa>
 8000d54:	2300      	movs	r3, #0
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7d1b      	ldrb	r3, [r3, #20]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d119      	bne.n	8000d98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7b1b      	ldrb	r3, [r3, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	035a      	lsls	r2, r3, #13
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e00b      	b.n	8000d98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d84:	f043 0220 	orr.w	r2, r3, #32
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d90:	f043 0201 	orr.w	r2, r3, #1
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <HAL_ADC_Init+0x1a8>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	6812      	ldr	r2, [r2, #0]
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dc8:	d003      	beq.n	8000dd2 <HAL_ADC_Init+0x126>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d104      	bne.n	8000ddc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	051b      	lsls	r3, r3, #20
 8000dda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_ADC_Init+0x1ac>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d10b      	bne.n	8000e18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0a:	f023 0303 	bic.w	r3, r3, #3
 8000e0e:	f043 0201 	orr.w	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e16:	e018      	b.n	8000e4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	f023 0312 	bic.w	r3, r3, #18
 8000e20:	f043 0210 	orr.w	r2, r3, #16
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e38:	e007      	b.n	8000e4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3e:	f043 0210 	orr.w	r2, r3, #16
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	ffe1f7fd 	.word	0xffe1f7fd
 8000e58:	ff1f0efe 	.word	0xff1f0efe

08000e5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d101      	bne.n	8000e76 <HAL_ADC_Start+0x1a>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e098      	b.n	8000fa8 <HAL_ADC_Start+0x14c>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 fb64 	bl	800154c <ADC_Enable>
 8000e84:	4603      	mov	r3, r0
 8000e86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f040 8087 	bne.w	8000f9e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a41      	ldr	r2, [pc, #260]	; (8000fb0 <HAL_ADC_Start+0x154>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d105      	bne.n	8000eba <HAL_ADC_Start+0x5e>
 8000eae:	4b41      	ldr	r3, [pc, #260]	; (8000fb4 <HAL_ADC_Start+0x158>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d115      	bne.n	8000ee6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d026      	beq.n	8000f22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000edc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ee4:	e01d      	b.n	8000f22 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <HAL_ADC_Start+0x158>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d004      	beq.n	8000f06 <HAL_ADC_Start+0xaa>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a2b      	ldr	r2, [pc, #172]	; (8000fb0 <HAL_ADC_Start+0x154>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d10d      	bne.n	8000f22 <HAL_ADC_Start+0xc6>
 8000f06:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <HAL_ADC_Start+0x158>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d007      	beq.n	8000f22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	f023 0206 	bic.w	r2, r3, #6
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f3a:	e002      	b.n	8000f42 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f06f 0202 	mvn.w	r2, #2
 8000f52:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f62:	d113      	bne.n	8000f8c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f68:	4a11      	ldr	r2, [pc, #68]	; (8000fb0 <HAL_ADC_Start+0x154>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d105      	bne.n	8000f7a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_ADC_Start+0x158>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d108      	bne.n	8000f8c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	e00c      	b.n	8000fa6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	e003      	b.n	8000fa6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40012800 	.word	0x40012800
 8000fb4:	40012400 	.word	0x40012400

08000fb8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a64      	ldr	r2, [pc, #400]	; (8001160 <HAL_ADC_Start_DMA+0x1a8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d004      	beq.n	8000fdc <HAL_ADC_Start_DMA+0x24>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a63      	ldr	r2, [pc, #396]	; (8001164 <HAL_ADC_Start_DMA+0x1ac>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d106      	bne.n	8000fea <HAL_ADC_Start_DMA+0x32>
 8000fdc:	4b60      	ldr	r3, [pc, #384]	; (8001160 <HAL_ADC_Start_DMA+0x1a8>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f040 80b3 	bne.w	8001150 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <HAL_ADC_Start_DMA+0x40>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e0ae      	b.n	8001156 <HAL_ADC_Start_DMA+0x19e>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f000 faa3 	bl	800154c <ADC_Enable>
 8001006:	4603      	mov	r3, r0
 8001008:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 809a 	bne.w	8001146 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800101a:	f023 0301 	bic.w	r3, r3, #1
 800101e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a4e      	ldr	r2, [pc, #312]	; (8001164 <HAL_ADC_Start_DMA+0x1ac>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d105      	bne.n	800103c <HAL_ADC_Start_DMA+0x84>
 8001030:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <HAL_ADC_Start_DMA+0x1a8>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d115      	bne.n	8001068 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001040:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001052:	2b00      	cmp	r3, #0
 8001054:	d026      	beq.n	80010a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800105e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001066:	e01d      	b.n	80010a4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a39      	ldr	r2, [pc, #228]	; (8001160 <HAL_ADC_Start_DMA+0x1a8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d004      	beq.n	8001088 <HAL_ADC_Start_DMA+0xd0>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a38      	ldr	r2, [pc, #224]	; (8001164 <HAL_ADC_Start_DMA+0x1ac>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d10d      	bne.n	80010a4 <HAL_ADC_Start_DMA+0xec>
 8001088:	4b35      	ldr	r3, [pc, #212]	; (8001160 <HAL_ADC_Start_DMA+0x1a8>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001090:	2b00      	cmp	r3, #0
 8001092:	d007      	beq.n	80010a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800109c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	f023 0206 	bic.w	r2, r3, #6
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80010bc:	e002      	b.n	80010c4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a25      	ldr	r2, [pc, #148]	; (8001168 <HAL_ADC_Start_DMA+0x1b0>)
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4a24      	ldr	r2, [pc, #144]	; (800116c <HAL_ADC_Start_DMA+0x1b4>)
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4a23      	ldr	r2, [pc, #140]	; (8001170 <HAL_ADC_Start_DMA+0x1b8>)
 80010e2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f06f 0202 	mvn.w	r2, #2
 80010ec:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010fc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a18      	ldr	r0, [r3, #32]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	334c      	adds	r3, #76	; 0x4c
 8001108:	4619      	mov	r1, r3
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f000 fc8f 	bl	8001a30 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800111c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001120:	d108      	bne.n	8001134 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001130:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001132:	e00f      	b.n	8001154 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001142:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001144:	e006      	b.n	8001154 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800114e:	e001      	b.n	8001154 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001154:	7dfb      	ldrb	r3, [r7, #23]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40012400 	.word	0x40012400
 8001164:	40012800 	.word	0x40012800
 8001168:	08001683 	.word	0x08001683
 800116c:	080016ff 	.word	0x080016ff
 8001170:	0800171b 	.word	0x0800171b

08001174 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0320 	and.w	r3, r3, #32
 800119e:	2b20      	cmp	r3, #32
 80011a0:	d140      	bne.n	8001224 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d139      	bne.n	8001224 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	f003 0310 	and.w	r3, r3, #16
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d105      	bne.n	80011c8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011d6:	d11d      	bne.n	8001214 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d119      	bne.n	8001214 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0220 	bic.w	r2, r2, #32
 80011ee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	f043 0201 	orr.w	r2, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f87c 	bl	8001312 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f06f 0212 	mvn.w	r2, #18
 8001222:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122e:	2b80      	cmp	r3, #128	; 0x80
 8001230:	d14f      	bne.n	80012d2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b04      	cmp	r3, #4
 800123e:	d148      	bne.n	80012d2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001262:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001266:	d012      	beq.n	800128e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001272:	2b00      	cmp	r3, #0
 8001274:	d125      	bne.n	80012c2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001280:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001284:	d11d      	bne.n	80012c2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800128a:	2b00      	cmp	r3, #0
 800128c:	d119      	bne.n	80012c2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800129c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d105      	bne.n	80012c2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 fa43 	bl	800174e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f06f 020c 	mvn.w	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012dc:	2b40      	cmp	r3, #64	; 0x40
 80012de:	d114      	bne.n	800130a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d10d      	bne.n	800130a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f81b 	bl	8001336 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f06f 0201 	mvn.w	r2, #1
 8001308:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
	...

0800135c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001374:	2b01      	cmp	r3, #1
 8001376:	d101      	bne.n	800137c <HAL_ADC_ConfigChannel+0x20>
 8001378:	2302      	movs	r3, #2
 800137a:	e0dc      	b.n	8001536 <HAL_ADC_ConfigChannel+0x1da>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b06      	cmp	r3, #6
 800138a:	d81c      	bhi.n	80013c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	3b05      	subs	r3, #5
 800139e:	221f      	movs	r2, #31
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	4019      	ands	r1, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3b05      	subs	r3, #5
 80013b8:	fa00 f203 	lsl.w	r2, r0, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34
 80013c4:	e03c      	b.n	8001440 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b0c      	cmp	r3, #12
 80013cc:	d81c      	bhi.n	8001408 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b23      	subs	r3, #35	; 0x23
 80013e0:	221f      	movs	r2, #31
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	4019      	ands	r1, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b23      	subs	r3, #35	; 0x23
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
 8001406:	e01b      	b.n	8001440 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b41      	subs	r3, #65	; 0x41
 800141a:	221f      	movs	r2, #31
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	4019      	ands	r1, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	3b41      	subs	r3, #65	; 0x41
 8001434:	fa00 f203 	lsl.w	r2, r0, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b09      	cmp	r3, #9
 8001446:	d91c      	bls.n	8001482 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68d9      	ldr	r1, [r3, #12]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	3b1e      	subs	r3, #30
 800145a:	2207      	movs	r2, #7
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	4019      	ands	r1, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	6898      	ldr	r0, [r3, #8]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	3b1e      	subs	r3, #30
 8001474:	fa00 f203 	lsl.w	r2, r0, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	e019      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6919      	ldr	r1, [r3, #16]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	2207      	movs	r2, #7
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	4019      	ands	r1, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6898      	ldr	r0, [r3, #8]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	fa00 f203 	lsl.w	r2, r0, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b10      	cmp	r3, #16
 80014bc:	d003      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014c2:	2b11      	cmp	r3, #17
 80014c4:	d132      	bne.n	800152c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_ADC_ConfigChannel+0x1e4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d125      	bne.n	800151c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d126      	bne.n	800152c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b10      	cmp	r3, #16
 80014f4:	d11a      	bne.n	800152c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_ADC_ConfigChannel+0x1e8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a13      	ldr	r2, [pc, #76]	; (8001548 <HAL_ADC_ConfigChannel+0x1ec>)
 80014fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001500:	0c9a      	lsrs	r2, r3, #18
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800150c:	e002      	b.n	8001514 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3b01      	subs	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f9      	bne.n	800150e <HAL_ADC_ConfigChannel+0x1b2>
 800151a:	e007      	b.n	800152c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	f043 0220 	orr.w	r2, r3, #32
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40012400 	.word	0x40012400
 8001544:	20000000 	.word	0x20000000
 8001548:	431bde83 	.word	0x431bde83

0800154c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b01      	cmp	r3, #1
 8001568:	d040      	beq.n	80015ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0201 	orr.w	r2, r2, #1
 8001578:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <ADC_Enable+0xac>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <ADC_Enable+0xb0>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	0c9b      	lsrs	r3, r3, #18
 8001586:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001588:	e002      	b.n	8001590 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3b01      	subs	r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f9      	bne.n	800158a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001596:	f7ff fb7f 	bl	8000c98 <HAL_GetTick>
 800159a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800159c:	e01f      	b.n	80015de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800159e:	f7ff fb7b 	bl	8000c98 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d918      	bls.n	80015de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d011      	beq.n	80015de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	f043 0210 	orr.w	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ca:	f043 0201 	orr.w	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e007      	b.n	80015ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d1d8      	bne.n	800159e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000000 	.word	0x20000000
 80015fc:	431bde83 	.word	0x431bde83

08001600 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b01      	cmp	r3, #1
 8001618:	d12e      	bne.n	8001678 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800162a:	f7ff fb35 	bl	8000c98 <HAL_GetTick>
 800162e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001630:	e01b      	b.n	800166a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001632:	f7ff fb31 	bl	8000c98 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d914      	bls.n	800166a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b01      	cmp	r3, #1
 800164c:	d10d      	bne.n	800166a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	f043 0210 	orr.w	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	f043 0201 	orr.w	r2, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e007      	b.n	800167a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b01      	cmp	r3, #1
 8001676:	d0dc      	beq.n	8001632 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001698:	2b00      	cmp	r3, #0
 800169a:	d127      	bne.n	80016ec <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016b6:	d115      	bne.n	80016e4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d111      	bne.n	80016e4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7ff fe14 	bl	8001312 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80016ea:	e004      	b.n	80016f6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	4798      	blx	r3
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f7ff fe09 	bl	8001324 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f043 0204 	orr.w	r2, r3, #4
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff fe01 	bl	8001348 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4906      	ldr	r1, [pc, #24]	; (80017f8 <__NVIC_EnableIRQ+0x34>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff90 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff2d 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff42 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff90 	bl	8001850 <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5f 	bl	80017fc <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff35 	bl	80017c4 <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e043      	b.n	8001a1a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_DMA_Init+0xa8>)
 800199a:	4413      	add	r3, r2
 800199c:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <HAL_DMA_Init+0xac>)
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	009a      	lsls	r2, r3, #2
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <HAL_DMA_Init+0xb0>)
 80019ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	bffdfff8 	.word	0xbffdfff8
 8001a28:	cccccccd 	.word	0xcccccccd
 8001a2c:	40020000 	.word	0x40020000

08001a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_DMA_Start_IT+0x20>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e04a      	b.n	8001ae6 <HAL_DMA_Start_IT+0xb6>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d13a      	bne.n	8001ad8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2202      	movs	r2, #2
 8001a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0201 	bic.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f9e8 	bl	8001e5c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 020e 	orr.w	r2, r2, #14
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e00f      	b.n	8001ac6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0204 	bic.w	r2, r2, #4
 8001ab4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 020a 	orr.w	r2, r2, #10
 8001ac4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e005      	b.n	8001ae4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d008      	beq.n	8001b16 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2204      	movs	r2, #4
 8001b08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e020      	b.n	8001b58 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 020e 	bic.w	r2, r2, #14
 8001b24:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0201 	bic.w	r2, r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f202 	lsl.w	r2, r1, r2
 8001b44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d005      	beq.n	8001b86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e051      	b.n	8001c2a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 020e 	bic.w	r2, r2, #14
 8001b94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_DMA_Abort_IT+0xd0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d029      	beq.n	8001c04 <HAL_DMA_Abort_IT+0xa0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a20      	ldr	r2, [pc, #128]	; (8001c38 <HAL_DMA_Abort_IT+0xd4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d022      	beq.n	8001c00 <HAL_DMA_Abort_IT+0x9c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <HAL_DMA_Abort_IT+0xd8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d01a      	beq.n	8001bfa <HAL_DMA_Abort_IT+0x96>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_DMA_Abort_IT+0xdc>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d012      	beq.n	8001bf4 <HAL_DMA_Abort_IT+0x90>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <HAL_DMA_Abort_IT+0xe0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d00a      	beq.n	8001bee <HAL_DMA_Abort_IT+0x8a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1a      	ldr	r2, [pc, #104]	; (8001c48 <HAL_DMA_Abort_IT+0xe4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d102      	bne.n	8001be8 <HAL_DMA_Abort_IT+0x84>
 8001be2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001be6:	e00e      	b.n	8001c06 <HAL_DMA_Abort_IT+0xa2>
 8001be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bec:	e00b      	b.n	8001c06 <HAL_DMA_Abort_IT+0xa2>
 8001bee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf2:	e008      	b.n	8001c06 <HAL_DMA_Abort_IT+0xa2>
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	e005      	b.n	8001c06 <HAL_DMA_Abort_IT+0xa2>
 8001bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfe:	e002      	b.n	8001c06 <HAL_DMA_Abort_IT+0xa2>
 8001c00:	2310      	movs	r3, #16
 8001c02:	e000      	b.n	8001c06 <HAL_DMA_Abort_IT+0xa2>
 8001c04:	2301      	movs	r3, #1
 8001c06:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <HAL_DMA_Abort_IT+0xe8>)
 8001c08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	4798      	blx	r3
    } 
  }
  return status;
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40020008 	.word	0x40020008
 8001c38:	4002001c 	.word	0x4002001c
 8001c3c:	40020030 	.word	0x40020030
 8001c40:	40020044 	.word	0x40020044
 8001c44:	40020058 	.word	0x40020058
 8001c48:	4002006c 	.word	0x4002006c
 8001c4c:	40020000 	.word	0x40020000

08001c50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d04f      	beq.n	8001d18 <HAL_DMA_IRQHandler+0xc8>
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d04a      	beq.n	8001d18 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d107      	bne.n	8001ca0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0204 	bic.w	r2, r2, #4
 8001c9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a66      	ldr	r2, [pc, #408]	; (8001e40 <HAL_DMA_IRQHandler+0x1f0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d029      	beq.n	8001cfe <HAL_DMA_IRQHandler+0xae>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a65      	ldr	r2, [pc, #404]	; (8001e44 <HAL_DMA_IRQHandler+0x1f4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d022      	beq.n	8001cfa <HAL_DMA_IRQHandler+0xaa>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a63      	ldr	r2, [pc, #396]	; (8001e48 <HAL_DMA_IRQHandler+0x1f8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01a      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xa4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a62      	ldr	r2, [pc, #392]	; (8001e4c <HAL_DMA_IRQHandler+0x1fc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d012      	beq.n	8001cee <HAL_DMA_IRQHandler+0x9e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a60      	ldr	r2, [pc, #384]	; (8001e50 <HAL_DMA_IRQHandler+0x200>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x98>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a5f      	ldr	r2, [pc, #380]	; (8001e54 <HAL_DMA_IRQHandler+0x204>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d102      	bne.n	8001ce2 <HAL_DMA_IRQHandler+0x92>
 8001cdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ce0:	e00e      	b.n	8001d00 <HAL_DMA_IRQHandler+0xb0>
 8001ce2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ce6:	e00b      	b.n	8001d00 <HAL_DMA_IRQHandler+0xb0>
 8001ce8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001cec:	e008      	b.n	8001d00 <HAL_DMA_IRQHandler+0xb0>
 8001cee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cf2:	e005      	b.n	8001d00 <HAL_DMA_IRQHandler+0xb0>
 8001cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf8:	e002      	b.n	8001d00 <HAL_DMA_IRQHandler+0xb0>
 8001cfa:	2340      	movs	r3, #64	; 0x40
 8001cfc:	e000      	b.n	8001d00 <HAL_DMA_IRQHandler+0xb0>
 8001cfe:	2304      	movs	r3, #4
 8001d00:	4a55      	ldr	r2, [pc, #340]	; (8001e58 <HAL_DMA_IRQHandler+0x208>)
 8001d02:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8094 	beq.w	8001e36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d16:	e08e      	b.n	8001e36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d056      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x186>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d051      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10b      	bne.n	8001d58 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 020a 	bic.w	r2, r2, #10
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a38      	ldr	r2, [pc, #224]	; (8001e40 <HAL_DMA_IRQHandler+0x1f0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d029      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x166>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a37      	ldr	r2, [pc, #220]	; (8001e44 <HAL_DMA_IRQHandler+0x1f4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d022      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x162>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a35      	ldr	r2, [pc, #212]	; (8001e48 <HAL_DMA_IRQHandler+0x1f8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01a      	beq.n	8001dac <HAL_DMA_IRQHandler+0x15c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a34      	ldr	r2, [pc, #208]	; (8001e4c <HAL_DMA_IRQHandler+0x1fc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d012      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x156>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a32      	ldr	r2, [pc, #200]	; (8001e50 <HAL_DMA_IRQHandler+0x200>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00a      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x150>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a31      	ldr	r2, [pc, #196]	; (8001e54 <HAL_DMA_IRQHandler+0x204>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d102      	bne.n	8001d9a <HAL_DMA_IRQHandler+0x14a>
 8001d94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d98:	e00e      	b.n	8001db8 <HAL_DMA_IRQHandler+0x168>
 8001d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9e:	e00b      	b.n	8001db8 <HAL_DMA_IRQHandler+0x168>
 8001da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da4:	e008      	b.n	8001db8 <HAL_DMA_IRQHandler+0x168>
 8001da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001daa:	e005      	b.n	8001db8 <HAL_DMA_IRQHandler+0x168>
 8001dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db0:	e002      	b.n	8001db8 <HAL_DMA_IRQHandler+0x168>
 8001db2:	2320      	movs	r3, #32
 8001db4:	e000      	b.n	8001db8 <HAL_DMA_IRQHandler+0x168>
 8001db6:	2302      	movs	r3, #2
 8001db8:	4a27      	ldr	r2, [pc, #156]	; (8001e58 <HAL_DMA_IRQHandler+0x208>)
 8001dba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d034      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001dd4:	e02f      	b.n	8001e36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	2208      	movs	r2, #8
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d028      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x1e8>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d023      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 020e 	bic.w	r2, r2, #14
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
    }
  }
  return;
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
}
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40020008 	.word	0x40020008
 8001e44:	4002001c 	.word	0x4002001c
 8001e48:	40020030 	.word	0x40020030
 8001e4c:	40020044 	.word	0x40020044
 8001e50:	40020058 	.word	0x40020058
 8001e54:	4002006c 	.word	0x4002006c
 8001e58:	40020000 	.word	0x40020000

08001e5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d108      	bne.n	8001e9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e9a:	e007      	b.n	8001eac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	60da      	str	r2, [r3, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b08b      	sub	sp, #44	; 0x2c
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eca:	e169      	b.n	80021a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	f040 8158 	bne.w	800219a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4a9a      	ldr	r2, [pc, #616]	; (8002158 <HAL_GPIO_Init+0x2a0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d05e      	beq.n	8001fb2 <HAL_GPIO_Init+0xfa>
 8001ef4:	4a98      	ldr	r2, [pc, #608]	; (8002158 <HAL_GPIO_Init+0x2a0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d875      	bhi.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001efa:	4a98      	ldr	r2, [pc, #608]	; (800215c <HAL_GPIO_Init+0x2a4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d058      	beq.n	8001fb2 <HAL_GPIO_Init+0xfa>
 8001f00:	4a96      	ldr	r2, [pc, #600]	; (800215c <HAL_GPIO_Init+0x2a4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d86f      	bhi.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001f06:	4a96      	ldr	r2, [pc, #600]	; (8002160 <HAL_GPIO_Init+0x2a8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d052      	beq.n	8001fb2 <HAL_GPIO_Init+0xfa>
 8001f0c:	4a94      	ldr	r2, [pc, #592]	; (8002160 <HAL_GPIO_Init+0x2a8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d869      	bhi.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001f12:	4a94      	ldr	r2, [pc, #592]	; (8002164 <HAL_GPIO_Init+0x2ac>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d04c      	beq.n	8001fb2 <HAL_GPIO_Init+0xfa>
 8001f18:	4a92      	ldr	r2, [pc, #584]	; (8002164 <HAL_GPIO_Init+0x2ac>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d863      	bhi.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001f1e:	4a92      	ldr	r2, [pc, #584]	; (8002168 <HAL_GPIO_Init+0x2b0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d046      	beq.n	8001fb2 <HAL_GPIO_Init+0xfa>
 8001f24:	4a90      	ldr	r2, [pc, #576]	; (8002168 <HAL_GPIO_Init+0x2b0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d85d      	bhi.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d82a      	bhi.n	8001f84 <HAL_GPIO_Init+0xcc>
 8001f2e:	2b12      	cmp	r3, #18
 8001f30:	d859      	bhi.n	8001fe6 <HAL_GPIO_Init+0x12e>
 8001f32:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <HAL_GPIO_Init+0x80>)
 8001f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f38:	08001fb3 	.word	0x08001fb3
 8001f3c:	08001f8d 	.word	0x08001f8d
 8001f40:	08001f9f 	.word	0x08001f9f
 8001f44:	08001fe1 	.word	0x08001fe1
 8001f48:	08001fe7 	.word	0x08001fe7
 8001f4c:	08001fe7 	.word	0x08001fe7
 8001f50:	08001fe7 	.word	0x08001fe7
 8001f54:	08001fe7 	.word	0x08001fe7
 8001f58:	08001fe7 	.word	0x08001fe7
 8001f5c:	08001fe7 	.word	0x08001fe7
 8001f60:	08001fe7 	.word	0x08001fe7
 8001f64:	08001fe7 	.word	0x08001fe7
 8001f68:	08001fe7 	.word	0x08001fe7
 8001f6c:	08001fe7 	.word	0x08001fe7
 8001f70:	08001fe7 	.word	0x08001fe7
 8001f74:	08001fe7 	.word	0x08001fe7
 8001f78:	08001fe7 	.word	0x08001fe7
 8001f7c:	08001f95 	.word	0x08001f95
 8001f80:	08001fa9 	.word	0x08001fa9
 8001f84:	4a79      	ldr	r2, [pc, #484]	; (800216c <HAL_GPIO_Init+0x2b4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f8a:	e02c      	b.n	8001fe6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	623b      	str	r3, [r7, #32]
          break;
 8001f92:	e029      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	623b      	str	r3, [r7, #32]
          break;
 8001f9c:	e024      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	3308      	adds	r3, #8
 8001fa4:	623b      	str	r3, [r7, #32]
          break;
 8001fa6:	e01f      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	330c      	adds	r3, #12
 8001fae:	623b      	str	r3, [r7, #32]
          break;
 8001fb0:	e01a      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d102      	bne.n	8001fc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	623b      	str	r3, [r7, #32]
          break;
 8001fbe:	e013      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	611a      	str	r2, [r3, #16]
          break;
 8001fd2:	e009      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	615a      	str	r2, [r3, #20]
          break;
 8001fde:	e003      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
          break;
 8001fe4:	e000      	b.n	8001fe8 <HAL_GPIO_Init+0x130>
          break;
 8001fe6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2bff      	cmp	r3, #255	; 0xff
 8001fec:	d801      	bhi.n	8001ff2 <HAL_GPIO_Init+0x13a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	e001      	b.n	8001ff6 <HAL_GPIO_Init+0x13e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2bff      	cmp	r3, #255	; 0xff
 8001ffc:	d802      	bhi.n	8002004 <HAL_GPIO_Init+0x14c>
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	e002      	b.n	800200a <HAL_GPIO_Init+0x152>
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	3b08      	subs	r3, #8
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	210f      	movs	r1, #15
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	401a      	ands	r2, r3
 800201c:	6a39      	ldr	r1, [r7, #32]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	431a      	orrs	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80b1 	beq.w	800219a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002038:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <HAL_GPIO_Init+0x2b8>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a4c      	ldr	r2, [pc, #304]	; (8002170 <HAL_GPIO_Init+0x2b8>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_GPIO_Init+0x2b8>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002050:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x2bc>)
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	220f      	movs	r2, #15
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4013      	ands	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a40      	ldr	r2, [pc, #256]	; (8002178 <HAL_GPIO_Init+0x2c0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_GPIO_Init+0x1ec>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a3f      	ldr	r2, [pc, #252]	; (800217c <HAL_GPIO_Init+0x2c4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00d      	beq.n	80020a0 <HAL_GPIO_Init+0x1e8>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a3e      	ldr	r2, [pc, #248]	; (8002180 <HAL_GPIO_Init+0x2c8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d007      	beq.n	800209c <HAL_GPIO_Init+0x1e4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3d      	ldr	r2, [pc, #244]	; (8002184 <HAL_GPIO_Init+0x2cc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_GPIO_Init+0x1e0>
 8002094:	2303      	movs	r3, #3
 8002096:	e006      	b.n	80020a6 <HAL_GPIO_Init+0x1ee>
 8002098:	2304      	movs	r3, #4
 800209a:	e004      	b.n	80020a6 <HAL_GPIO_Init+0x1ee>
 800209c:	2302      	movs	r3, #2
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_Init+0x1ee>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_GPIO_Init+0x1ee>
 80020a4:	2300      	movs	r3, #0
 80020a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a8:	f002 0203 	and.w	r2, r2, #3
 80020ac:	0092      	lsls	r2, r2, #2
 80020ae:	4093      	lsls	r3, r2
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020b6:	492f      	ldr	r1, [pc, #188]	; (8002174 <HAL_GPIO_Init+0x2bc>)
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020d0:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	492c      	ldr	r1, [pc, #176]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4928      	ldr	r1, [pc, #160]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020f8:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4922      	ldr	r1, [pc, #136]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	43db      	mvns	r3, r3
 800210e:	491e      	ldr	r1, [pc, #120]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002110:	4013      	ands	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	4918      	ldr	r1, [pc, #96]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	43db      	mvns	r3, r3
 8002136:	4914      	ldr	r1, [pc, #80]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 8002138:	4013      	ands	r3, r2
 800213a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d021      	beq.n	800218c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	490e      	ldr	r1, [pc, #56]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
 8002154:	e021      	b.n	800219a <HAL_GPIO_Init+0x2e2>
 8002156:	bf00      	nop
 8002158:	10320000 	.word	0x10320000
 800215c:	10310000 	.word	0x10310000
 8002160:	10220000 	.word	0x10220000
 8002164:	10210000 	.word	0x10210000
 8002168:	10120000 	.word	0x10120000
 800216c:	10110000 	.word	0x10110000
 8002170:	40021000 	.word	0x40021000
 8002174:	40010000 	.word	0x40010000
 8002178:	40010800 	.word	0x40010800
 800217c:	40010c00 	.word	0x40010c00
 8002180:	40011000 	.word	0x40011000
 8002184:	40011400 	.word	0x40011400
 8002188:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_GPIO_Init+0x304>)
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	43db      	mvns	r3, r3
 8002194:	4909      	ldr	r1, [pc, #36]	; (80021bc <HAL_GPIO_Init+0x304>)
 8002196:	4013      	ands	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	3301      	adds	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f47f ae8e 	bne.w	8001ecc <HAL_GPIO_Init+0x14>
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	372c      	adds	r7, #44	; 0x2c
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d0:	787b      	ldrb	r3, [r7, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021dc:	e003      	b.n	80021e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021de:	887b      	ldrh	r3, [r7, #2]
 80021e0:	041a      	lsls	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	611a      	str	r2, [r3, #16]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43d9      	mvns	r1, r3
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	400b      	ands	r3, r1
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	611a      	str	r2, [r3, #16]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
	...

08002224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e272      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8087 	beq.w	8002352 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002244:	4b92      	ldr	r3, [pc, #584]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b04      	cmp	r3, #4
 800224e:	d00c      	beq.n	800226a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002250:	4b8f      	ldr	r3, [pc, #572]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d112      	bne.n	8002282 <HAL_RCC_OscConfig+0x5e>
 800225c:	4b8c      	ldr	r3, [pc, #560]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d10b      	bne.n	8002282 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226a:	4b89      	ldr	r3, [pc, #548]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d06c      	beq.n	8002350 <HAL_RCC_OscConfig+0x12c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d168      	bne.n	8002350 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e24c      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x76>
 800228c:	4b80      	ldr	r3, [pc, #512]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a7f      	ldr	r2, [pc, #508]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	e02e      	b.n	80022f8 <HAL_RCC_OscConfig+0xd4>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x98>
 80022a2:	4b7b      	ldr	r3, [pc, #492]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7a      	ldr	r2, [pc, #488]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b78      	ldr	r3, [pc, #480]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a77      	ldr	r2, [pc, #476]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e01d      	b.n	80022f8 <HAL_RCC_OscConfig+0xd4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0xbc>
 80022c6:	4b72      	ldr	r3, [pc, #456]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a71      	ldr	r2, [pc, #452]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b6f      	ldr	r3, [pc, #444]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a6e      	ldr	r2, [pc, #440]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0xd4>
 80022e0:	4b6b      	ldr	r3, [pc, #428]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6a      	ldr	r2, [pc, #424]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b68      	ldr	r3, [pc, #416]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a67      	ldr	r2, [pc, #412]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fcca 	bl	8000c98 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe fcc6 	bl	8000c98 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e200      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b5d      	ldr	r3, [pc, #372]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0xe4>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7fe fcb6 	bl	8000c98 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe fcb2 	bl	8000c98 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1ec      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x10c>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d063      	beq.n	8002426 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800235e:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800236a:	4b49      	ldr	r3, [pc, #292]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b08      	cmp	r3, #8
 8002374:	d11c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x18c>
 8002376:	4b46      	ldr	r3, [pc, #280]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d116      	bne.n	80023b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x176>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e1c0      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4939      	ldr	r1, [pc, #228]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	e03a      	b.n	8002426 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b8:	4b36      	ldr	r3, [pc, #216]	; (8002494 <HAL_RCC_OscConfig+0x270>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe fc6b 	bl	8000c98 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c6:	f7fe fc67 	bl	8000c98 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e1a1      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4927      	ldr	r1, [pc, #156]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
 80023f8:	e015      	b.n	8002426 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <HAL_RCC_OscConfig+0x270>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe fc4a 	bl	8000c98 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002408:	f7fe fc46 	bl	8000c98 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e180      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d03a      	beq.n	80024a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d019      	beq.n	800246e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_RCC_OscConfig+0x274>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002440:	f7fe fc2a 	bl	8000c98 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002448:	f7fe fc26 	bl	8000c98 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e160      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002466:	2001      	movs	r0, #1
 8002468:	f000 fad8 	bl	8002a1c <RCC_Delay>
 800246c:	e01c      	b.n	80024a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_RCC_OscConfig+0x274>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002474:	f7fe fc10 	bl	8000c98 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247a:	e00f      	b.n	800249c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247c:	f7fe fc0c 	bl	8000c98 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d908      	bls.n	800249c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e146      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	42420000 	.word	0x42420000
 8002498:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249c:	4b92      	ldr	r3, [pc, #584]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e9      	bne.n	800247c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80a6 	beq.w	8002602 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ba:	4b8b      	ldr	r3, [pc, #556]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10d      	bne.n	80024e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b88      	ldr	r3, [pc, #544]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a87      	ldr	r2, [pc, #540]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]
 80024d2:	4b85      	ldr	r3, [pc, #532]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024de:	2301      	movs	r3, #1
 80024e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e2:	4b82      	ldr	r3, [pc, #520]	; (80026ec <HAL_RCC_OscConfig+0x4c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d118      	bne.n	8002520 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ee:	4b7f      	ldr	r3, [pc, #508]	; (80026ec <HAL_RCC_OscConfig+0x4c8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a7e      	ldr	r2, [pc, #504]	; (80026ec <HAL_RCC_OscConfig+0x4c8>)
 80024f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fbcd 	bl	8000c98 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002502:	f7fe fbc9 	bl	8000c98 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b64      	cmp	r3, #100	; 0x64
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e103      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002514:	4b75      	ldr	r3, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x4c8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x312>
 8002528:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a6e      	ldr	r2, [pc, #440]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6213      	str	r3, [r2, #32]
 8002534:	e02d      	b.n	8002592 <HAL_RCC_OscConfig+0x36e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0x334>
 800253e:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	4a69      	ldr	r2, [pc, #420]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6213      	str	r3, [r2, #32]
 800254a:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4a66      	ldr	r2, [pc, #408]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	6213      	str	r3, [r2, #32]
 8002556:	e01c      	b.n	8002592 <HAL_RCC_OscConfig+0x36e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d10c      	bne.n	800257a <HAL_RCC_OscConfig+0x356>
 8002560:	4b61      	ldr	r3, [pc, #388]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4a60      	ldr	r2, [pc, #384]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6213      	str	r3, [r2, #32]
 800256c:	4b5e      	ldr	r3, [pc, #376]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4a5d      	ldr	r2, [pc, #372]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6213      	str	r3, [r2, #32]
 8002578:	e00b      	b.n	8002592 <HAL_RCC_OscConfig+0x36e>
 800257a:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4a5a      	ldr	r2, [pc, #360]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	f023 0301 	bic.w	r3, r3, #1
 8002584:	6213      	str	r3, [r2, #32]
 8002586:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a57      	ldr	r2, [pc, #348]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	f023 0304 	bic.w	r3, r3, #4
 8002590:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d015      	beq.n	80025c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7fe fb7d 	bl	8000c98 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fb79 	bl	8000c98 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0b1      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ee      	beq.n	80025a2 <HAL_RCC_OscConfig+0x37e>
 80025c4:	e014      	b.n	80025f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7fe fb67 	bl	8000c98 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7fe fb63 	bl	8000c98 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e09b      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e4:	4b40      	ldr	r3, [pc, #256]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ee      	bne.n	80025ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b3c      	ldr	r3, [pc, #240]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	4a3b      	ldr	r2, [pc, #236]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8087 	beq.w	800271a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d061      	beq.n	80026dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d146      	bne.n	80026ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002620:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <HAL_RCC_OscConfig+0x4cc>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7fe fb37 	bl	8000c98 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262e:	f7fe fb33 	bl	8000c98 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e06d      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d108      	bne.n	8002668 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4921      	ldr	r1, [pc, #132]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a19      	ldr	r1, [r3, #32]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	430b      	orrs	r3, r1
 800267a:	491b      	ldr	r1, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x4cc>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7fe fb07 	bl	8000c98 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe fb03 	bl	8000c98 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e03d      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x46a>
 80026ac:	e035      	b.n	800271a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_RCC_OscConfig+0x4cc>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe faf0 	bl	8000c98 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe faec 	bl	8000c98 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e026      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x498>
 80026da:	e01e      	b.n	800271a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d107      	bne.n	80026f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e019      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40007000 	.word	0x40007000
 80026f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_OscConfig+0x500>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	429a      	cmp	r2, r3
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	429a      	cmp	r2, r3
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000

08002728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0d0      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d910      	bls.n	800276c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0207 	bic.w	r2, r3, #7
 8002752:	4965      	ldr	r1, [pc, #404]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0b8      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d020      	beq.n	80027ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002784:	4b59      	ldr	r3, [pc, #356]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a58      	ldr	r2, [pc, #352]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800278e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800279c:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a52      	ldr	r2, [pc, #328]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a8:	4b50      	ldr	r3, [pc, #320]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	494d      	ldr	r1, [pc, #308]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d040      	beq.n	8002848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d115      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e07f      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e073      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e06b      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002806:	4b39      	ldr	r3, [pc, #228]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4936      	ldr	r1, [pc, #216]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002818:	f7fe fa3e 	bl	8000c98 <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	e00a      	b.n	8002836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7fe fa3a 	bl	8000c98 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e053      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 020c 	and.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1eb      	bne.n	8002820 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002848:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d210      	bcs.n	8002878 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 0207 	bic.w	r2, r3, #7
 800285e:	4922      	ldr	r1, [pc, #136]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e032      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4916      	ldr	r1, [pc, #88]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	490e      	ldr	r1, [pc, #56]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028b6:	f000 f821 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	490a      	ldr	r1, [pc, #40]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80028c8:	5ccb      	ldrb	r3, [r1, r3]
 80028ca:	fa22 f303 	lsr.w	r3, r2, r3
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <HAL_RCC_ClockConfig+0x1cc>)
 80028d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1d0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe f99c 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40022000 	.word	0x40022000
 80028ec:	40021000 	.word	0x40021000
 80028f0:	08004d70 	.word	0x08004d70
 80028f4:	20000000 	.word	0x20000000
 80028f8:	20000004 	.word	0x20000004

080028fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	b490      	push	{r4, r7}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002902:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002904:	1d3c      	adds	r4, r7, #4
 8002906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800290c:	f240 2301 	movw	r3, #513	; 0x201
 8002910:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b04      	cmp	r3, #4
 8002934:	d002      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x40>
 8002936:	2b08      	cmp	r3, #8
 8002938:	d003      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x46>
 800293a:	e02b      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800293c:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800293e:	623b      	str	r3, [r7, #32]
      break;
 8002940:	e02b      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	0c9b      	lsrs	r3, r3, #18
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	3328      	adds	r3, #40	; 0x28
 800294c:	443b      	add	r3, r7
 800294e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002952:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d012      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	0c5b      	lsrs	r3, r3, #17
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	3328      	adds	r3, #40	; 0x28
 800296a:	443b      	add	r3, r7
 800296c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002970:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002976:	fb03 f202 	mul.w	r2, r3, r2
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	e004      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	623b      	str	r3, [r7, #32]
      break;
 8002992:	e002      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002996:	623b      	str	r3, [r7, #32]
      break;
 8002998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299a:	6a3b      	ldr	r3, [r7, #32]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3728      	adds	r7, #40	; 0x28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc90      	pop	{r4, r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	08004d60 	.word	0x08004d60
 80029ac:	40021000 	.word	0x40021000
 80029b0:	007a1200 	.word	0x007a1200
 80029b4:	003d0900 	.word	0x003d0900

080029b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029bc:	4b02      	ldr	r3, [pc, #8]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	20000000 	.word	0x20000000

080029cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029d0:	f7ff fff2 	bl	80029b8 <HAL_RCC_GetHCLKFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4903      	ldr	r1, [pc, #12]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000
 80029f0:	08004d80 	.word	0x08004d80

080029f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f8:	f7ff ffde 	bl	80029b8 <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	0adb      	lsrs	r3, r3, #11
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4903      	ldr	r1, [pc, #12]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	08004d80 	.word	0x08004d80

08002a1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <RCC_Delay+0x34>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <RCC_Delay+0x38>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0a5b      	lsrs	r3, r3, #9
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a38:	bf00      	nop
  }
  while (Delay --);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1e5a      	subs	r2, r3, #1
 8002a3e:	60fa      	str	r2, [r7, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f9      	bne.n	8002a38 <RCC_Delay+0x1c>
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	20000000 	.word	0x20000000
 8002a54:	10624dd3 	.word	0x10624dd3

08002a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d07d      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a74:	2300      	movs	r3, #0
 8002a76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a78:	4b4f      	ldr	r3, [pc, #316]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10d      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	4b4c      	ldr	r3, [pc, #304]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	4a4b      	ldr	r2, [pc, #300]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	61d3      	str	r3, [r2, #28]
 8002a90:	4b49      	ldr	r3, [pc, #292]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	4b46      	ldr	r3, [pc, #280]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d118      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aac:	4b43      	ldr	r3, [pc, #268]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a42      	ldr	r2, [pc, #264]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab8:	f7fe f8ee 	bl	8000c98 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	e008      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac0:	f7fe f8ea 	bl	8000c98 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e06d      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d02e      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d027      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002afc:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b0c:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b12:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d014      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fe f8b9 	bl	8000c98 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe f8b5 	bl	8000c98 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e036      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ee      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4917      	ldr	r1, [pc, #92]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b7c:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	490b      	ldr	r1, [pc, #44]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	4904      	ldr	r1, [pc, #16]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	42420440 	.word	0x42420440

08002bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e041      	b.n	8002c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fd fe8a 	bl	8000904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f000 fc28 	bl	8003458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d001      	beq.n	8002c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e03a      	b.n	8002cf2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <HAL_TIM_Base_Start_IT+0x98>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00e      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x58>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d009      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x58>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x58>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d111      	bne.n	8002ce0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d010      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cde:	e007      	b.n	8002cf0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40000800 	.word	0x40000800

08002d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e041      	b.n	8002d9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f839 	bl	8002da6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f000 fb86 	bl	8003458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_TIM_PWM_Start+0x24>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	bf14      	ite	ne
 8002dd4:	2301      	movne	r3, #1
 8002dd6:	2300      	moveq	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e022      	b.n	8002e22 <HAL_TIM_PWM_Start+0x6a>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d109      	bne.n	8002df6 <HAL_TIM_PWM_Start+0x3e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	bf14      	ite	ne
 8002dee:	2301      	movne	r3, #1
 8002df0:	2300      	moveq	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	e015      	b.n	8002e22 <HAL_TIM_PWM_Start+0x6a>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d109      	bne.n	8002e10 <HAL_TIM_PWM_Start+0x58>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e008      	b.n	8002e22 <HAL_TIM_PWM_Start+0x6a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	bf14      	ite	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	2300      	moveq	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e05e      	b.n	8002ee8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d104      	bne.n	8002e3a <HAL_TIM_PWM_Start+0x82>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e38:	e013      	b.n	8002e62 <HAL_TIM_PWM_Start+0xaa>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d104      	bne.n	8002e4a <HAL_TIM_PWM_Start+0x92>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e48:	e00b      	b.n	8002e62 <HAL_TIM_PWM_Start+0xaa>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d104      	bne.n	8002e5a <HAL_TIM_PWM_Start+0xa2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e58:	e003      	b.n	8002e62 <HAL_TIM_PWM_Start+0xaa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2201      	movs	r2, #1
 8002e68:	6839      	ldr	r1, [r7, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fd74 	bl	8003958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1e      	ldr	r2, [pc, #120]	; (8002ef0 <HAL_TIM_PWM_Start+0x138>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d107      	bne.n	8002e8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <HAL_TIM_PWM_Start+0x138>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00e      	beq.n	8002eb2 <HAL_TIM_PWM_Start+0xfa>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9c:	d009      	beq.n	8002eb2 <HAL_TIM_PWM_Start+0xfa>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <HAL_TIM_PWM_Start+0x13c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d004      	beq.n	8002eb2 <HAL_TIM_PWM_Start+0xfa>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <HAL_TIM_PWM_Start+0x140>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d111      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b06      	cmp	r3, #6
 8002ec2:	d010      	beq.n	8002ee6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed4:	e007      	b.n	8002ee6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40000800 	.word	0x40000800

08002efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0202 	mvn.w	r2, #2
 8002f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa6f 	bl	8003422 <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa62 	bl	8003410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fa71 	bl	8003434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d122      	bne.n	8002fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d11b      	bne.n	8002fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0204 	mvn.w	r2, #4
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fa45 	bl	8003422 <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fa38 	bl	8003410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fa47 	bl	8003434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d122      	bne.n	8003000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d11b      	bne.n	8003000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0208 	mvn.w	r2, #8
 8002fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa1b 	bl	8003422 <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa0e 	bl	8003410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fa1d 	bl	8003434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b10      	cmp	r3, #16
 800300c:	d122      	bne.n	8003054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b10      	cmp	r3, #16
 800301a:	d11b      	bne.n	8003054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0210 	mvn.w	r2, #16
 8003024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2208      	movs	r2, #8
 800302a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f9f1 	bl	8003422 <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f9e4 	bl	8003410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f9f3 	bl	8003434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b01      	cmp	r3, #1
 8003060:	d10e      	bne.n	8003080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b01      	cmp	r3, #1
 800306e:	d107      	bne.n	8003080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0201 	mvn.w	r2, #1
 8003078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fd fadc 	bl	8000638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308a:	2b80      	cmp	r3, #128	; 0x80
 800308c:	d10e      	bne.n	80030ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	2b80      	cmp	r3, #128	; 0x80
 800309a:	d107      	bne.n	80030ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fd32 	bl	8003b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d10e      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d107      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f9b7 	bl	8003446 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d10e      	bne.n	8003104 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d107      	bne.n	8003104 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0220 	mvn.w	r2, #32
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fcfd 	bl	8003afe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003122:	2302      	movs	r3, #2
 8003124:	e0ac      	b.n	8003280 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	f200 809f 	bhi.w	8003274 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003136:	a201      	add	r2, pc, #4	; (adr r2, 800313c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	08003171 	.word	0x08003171
 8003140:	08003275 	.word	0x08003275
 8003144:	08003275 	.word	0x08003275
 8003148:	08003275 	.word	0x08003275
 800314c:	080031b1 	.word	0x080031b1
 8003150:	08003275 	.word	0x08003275
 8003154:	08003275 	.word	0x08003275
 8003158:	08003275 	.word	0x08003275
 800315c:	080031f3 	.word	0x080031f3
 8003160:	08003275 	.word	0x08003275
 8003164:	08003275 	.word	0x08003275
 8003168:	08003275 	.word	0x08003275
 800316c:	08003233 	.word	0x08003233
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f9d0 	bl	800351c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0208 	orr.w	r2, r2, #8
 800318a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0204 	bic.w	r2, r2, #4
 800319a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6999      	ldr	r1, [r3, #24]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	619a      	str	r2, [r3, #24]
      break;
 80031ae:	e062      	b.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fa16 	bl	80035e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6999      	ldr	r1, [r3, #24]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	021a      	lsls	r2, r3, #8
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	619a      	str	r2, [r3, #24]
      break;
 80031f0:	e041      	b.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fa5f 	bl	80036bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0208 	orr.w	r2, r2, #8
 800320c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0204 	bic.w	r2, r2, #4
 800321c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69d9      	ldr	r1, [r3, #28]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	61da      	str	r2, [r3, #28]
      break;
 8003230:	e021      	b.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 faa9 	bl	8003790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800324c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69d9      	ldr	r1, [r3, #28]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	021a      	lsls	r2, r3, #8
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	61da      	str	r2, [r3, #28]
      break;
 8003272:	e000      	b.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003274:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_TIM_ConfigClockSource+0x18>
 800329c:	2302      	movs	r3, #2
 800329e:	e0b3      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x180>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d8:	d03e      	beq.n	8003358 <HAL_TIM_ConfigClockSource+0xd0>
 80032da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032de:	f200 8087 	bhi.w	80033f0 <HAL_TIM_ConfigClockSource+0x168>
 80032e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e6:	f000 8085 	beq.w	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ee:	d87f      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x168>
 80032f0:	2b70      	cmp	r3, #112	; 0x70
 80032f2:	d01a      	beq.n	800332a <HAL_TIM_ConfigClockSource+0xa2>
 80032f4:	2b70      	cmp	r3, #112	; 0x70
 80032f6:	d87b      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x168>
 80032f8:	2b60      	cmp	r3, #96	; 0x60
 80032fa:	d050      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x116>
 80032fc:	2b60      	cmp	r3, #96	; 0x60
 80032fe:	d877      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x168>
 8003300:	2b50      	cmp	r3, #80	; 0x50
 8003302:	d03c      	beq.n	800337e <HAL_TIM_ConfigClockSource+0xf6>
 8003304:	2b50      	cmp	r3, #80	; 0x50
 8003306:	d873      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x168>
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d058      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x136>
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d86f      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x168>
 8003310:	2b30      	cmp	r3, #48	; 0x30
 8003312:	d064      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x156>
 8003314:	2b30      	cmp	r3, #48	; 0x30
 8003316:	d86b      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x168>
 8003318:	2b20      	cmp	r3, #32
 800331a:	d060      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x156>
 800331c:	2b20      	cmp	r3, #32
 800331e:	d867      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x168>
 8003320:	2b00      	cmp	r3, #0
 8003322:	d05c      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x156>
 8003324:	2b10      	cmp	r3, #16
 8003326:	d05a      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003328:	e062      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6899      	ldr	r1, [r3, #8]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f000 faee 	bl	800391a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800334c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	609a      	str	r2, [r3, #8]
      break;
 8003356:	e04e      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	6899      	ldr	r1, [r3, #8]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f000 fad7 	bl	800391a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800337a:	609a      	str	r2, [r3, #8]
      break;
 800337c:	e03b      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	461a      	mov	r2, r3
 800338c:	f000 fa4e 	bl	800382c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2150      	movs	r1, #80	; 0x50
 8003396:	4618      	mov	r0, r3
 8003398:	f000 faa5 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 800339c:	e02b      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6859      	ldr	r1, [r3, #4]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	461a      	mov	r2, r3
 80033ac:	f000 fa6c 	bl	8003888 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2160      	movs	r1, #96	; 0x60
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fa95 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 80033bc:	e01b      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f000 fa2e 	bl	800382c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2140      	movs	r1, #64	; 0x40
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fa85 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 80033dc:	e00b      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f000 fa7c 	bl	80038e6 <TIM_ITRx_SetConfig>
        break;
 80033ee:	e002      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033f0:	bf00      	nop
 80033f2:	e000      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a29      	ldr	r2, [pc, #164]	; (8003510 <TIM_Base_SetConfig+0xb8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00b      	beq.n	8003488 <TIM_Base_SetConfig+0x30>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003476:	d007      	beq.n	8003488 <TIM_Base_SetConfig+0x30>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a26      	ldr	r2, [pc, #152]	; (8003514 <TIM_Base_SetConfig+0xbc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_Base_SetConfig+0x30>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a25      	ldr	r2, [pc, #148]	; (8003518 <TIM_Base_SetConfig+0xc0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d108      	bne.n	800349a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <TIM_Base_SetConfig+0xb8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00b      	beq.n	80034ba <TIM_Base_SetConfig+0x62>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a8:	d007      	beq.n	80034ba <TIM_Base_SetConfig+0x62>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a19      	ldr	r2, [pc, #100]	; (8003514 <TIM_Base_SetConfig+0xbc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <TIM_Base_SetConfig+0x62>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a18      	ldr	r2, [pc, #96]	; (8003518 <TIM_Base_SetConfig+0xc0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d108      	bne.n	80034cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a07      	ldr	r2, [pc, #28]	; (8003510 <TIM_Base_SetConfig+0xb8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d103      	bne.n	8003500 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	615a      	str	r2, [r3, #20]
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800

0800351c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f023 0201 	bic.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0303 	bic.w	r3, r3, #3
 8003552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f023 0302 	bic.w	r3, r3, #2
 8003564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <TIM_OC1_SetConfig+0xc8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d10c      	bne.n	8003592 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f023 0308 	bic.w	r3, r3, #8
 800357e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <TIM_OC1_SetConfig+0xc8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d111      	bne.n	80035be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	621a      	str	r2, [r3, #32]
}
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40012c00 	.word	0x40012c00

080035e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f023 0210 	bic.w	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f023 0320 	bic.w	r3, r3, #32
 8003632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <TIM_OC2_SetConfig+0xd0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d10d      	bne.n	8003664 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003662:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <TIM_OC2_SetConfig+0xd0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d113      	bne.n	8003694 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800367a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	40012c00 	.word	0x40012c00

080036bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a1d      	ldr	r2, [pc, #116]	; (800378c <TIM_OC3_SetConfig+0xd0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d10d      	bne.n	8003736 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a14      	ldr	r2, [pc, #80]	; (800378c <TIM_OC3_SetConfig+0xd0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d113      	bne.n	8003766 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800374c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	621a      	str	r2, [r3, #32]
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40012c00 	.word	0x40012c00

08003790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	031b      	lsls	r3, r3, #12
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0f      	ldr	r2, [pc, #60]	; (8003828 <TIM_OC4_SetConfig+0x98>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d109      	bne.n	8003804 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	019b      	lsls	r3, r3, #6
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	40012c00 	.word	0x40012c00

0800382c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f023 0201 	bic.w	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f023 030a 	bic.w	r3, r3, #10
 8003868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f023 0210 	bic.w	r2, r3, #16
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	031b      	lsls	r3, r3, #12
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	621a      	str	r2, [r3, #32]
}
 80038dc:	bf00      	nop
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	f043 0307 	orr.w	r3, r3, #7
 8003908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	609a      	str	r2, [r3, #8]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800391a:	b480      	push	{r7}
 800391c:	b087      	sub	sp, #28
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003934:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	021a      	lsls	r2, r3, #8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	431a      	orrs	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	609a      	str	r2, [r3, #8]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	2201      	movs	r2, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	43db      	mvns	r3, r3
 800397a:	401a      	ands	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a1a      	ldr	r2, [r3, #32]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f003 031f 	and.w	r3, r3, #31
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e046      	b.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a16      	ldr	r2, [pc, #88]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00e      	beq.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a04:	d009      	beq.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a10      	ldr	r2, [pc, #64]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10c      	bne.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40000800 	.word	0x40000800

08003a5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e03d      	b.n	8003af4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e03f      	b.n	8003bb4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fc ff47 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2224      	movs	r2, #36	; 0x24
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fba8 	bl	80042bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d11d      	bne.n	8003c12 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <HAL_UART_Receive_IT+0x26>
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e016      	b.n	8003c14 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_UART_Receive_IT+0x38>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e00f      	b.n	8003c14 <HAL_UART_Receive_IT+0x58>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	461a      	mov	r2, r3
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f9ce 	bl	8003faa <UART_Start_Receive_IT>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	e000      	b.n	8003c14 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
  }
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10d      	bne.n	8003c6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_UART_IRQHandler+0x52>
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa7f 	bl	800416a <UART_Receive_IT>
      return;
 8003c6c:	e17b      	b.n	8003f66 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80b1 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x1bc>
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_UART_IRQHandler+0x70>
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80a6 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_UART_IRQHandler+0x90>
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_UART_IRQHandler+0xb0>
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f043 0202 	orr.w	r2, r3, #2
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_UART_IRQHandler+0xd0>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f043 0204 	orr.w	r2, r3, #4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00f      	beq.n	8003d16 <HAL_UART_IRQHandler+0xfa>
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <HAL_UART_IRQHandler+0xee>
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f043 0208 	orr.w	r2, r3, #8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 811e 	beq.w	8003f5c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <HAL_UART_IRQHandler+0x11e>
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fa18 	bl	800416a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf14      	ite	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	2300      	moveq	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <HAL_UART_IRQHandler+0x146>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d031      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f95a 	bl	800401c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d023      	beq.n	8003dbe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d84:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d013      	beq.n	8003db6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	4a76      	ldr	r2, [pc, #472]	; (8003f6c <HAL_UART_IRQHandler+0x350>)
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd fee2 	bl	8001b64 <HAL_DMA_Abort_IT>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003db0:	4610      	mov	r0, r2
 8003db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e00e      	b.n	8003dd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f8e3 	bl	8003f82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	e00a      	b.n	8003dd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f8df 	bl	8003f82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	e006      	b.n	8003dd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f8db 	bl	8003f82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dd2:	e0c3      	b.n	8003f5c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	bf00      	nop
    return;
 8003dd6:	e0c1      	b.n	8003f5c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	f040 80a1 	bne.w	8003f24 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 809b 	beq.w	8003f24 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8095 	beq.w	8003f24 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d04e      	beq.n	8003ebc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003e28:	8a3b      	ldrh	r3, [r7, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8098 	beq.w	8003f60 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e34:	8a3a      	ldrh	r2, [r7, #16]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	f080 8092 	bcs.w	8003f60 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	8a3a      	ldrh	r2, [r7, #16]
 8003e40:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d02b      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e5a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0210 	bic.w	r2, r2, #16
 8003e98:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fd fe25 	bl	8001aee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f86d 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003eba:	e051      	b.n	8003f60 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d047      	beq.n	8003f64 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003ed4:	8a7b      	ldrh	r3, [r7, #18]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d044      	beq.n	8003f64 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ee8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0210 	bic.w	r2, r2, #16
 8003f16:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f18:	8a7b      	ldrh	r3, [r7, #18]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f839 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f22:	e01f      	b.n	8003f64 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_UART_IRQHandler+0x324>
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f8af 	bl	800409c <UART_Transmit_IT>
    return;
 8003f3e:	e012      	b.n	8003f66 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00d      	beq.n	8003f66 <HAL_UART_IRQHandler+0x34a>
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8f0 	bl	800413a <UART_EndTransmit_IT>
    return;
 8003f5a:	e004      	b.n	8003f66 <HAL_UART_IRQHandler+0x34a>
    return;
 8003f5c:	bf00      	nop
 8003f5e:	e002      	b.n	8003f66 <HAL_UART_IRQHandler+0x34a>
      return;
 8003f60:	bf00      	nop
 8003f62:	e000      	b.n	8003f66 <HAL_UART_IRQHandler+0x34a>
      return;
 8003f64:	bf00      	nop
  }
}
 8003f66:	3728      	adds	r7, #40	; 0x28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	08004075 	.word	0x08004075

08003f70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	88fa      	ldrh	r2, [r7, #6]
 8003fc2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2222      	movs	r2, #34	; 0x22
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fee:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0220 	orr.w	r2, r2, #32
 800400e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004032:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	2b01      	cmp	r3, #1
 800404a:	d107      	bne.n	800405c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0210 	bic.w	r2, r2, #16
 800405a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	; 0x30
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7ff ff77 	bl	8003f82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b21      	cmp	r3, #33	; 0x21
 80040ae:	d13e      	bne.n	800412e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b8:	d114      	bne.n	80040e4 <UART_Transmit_IT+0x48>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d110      	bne.n	80040e4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	1c9a      	adds	r2, r3, #2
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	621a      	str	r2, [r3, #32]
 80040e2:	e008      	b.n	80040f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	1c59      	adds	r1, r3, #1
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6211      	str	r1, [r2, #32]
 80040ee:	781a      	ldrb	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29b      	uxth	r3, r3
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4619      	mov	r1, r3
 8004104:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004118:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004128:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e000      	b.n	8004130 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
  }
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004150:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff ff08 	bl	8003f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b086      	sub	sp, #24
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b22      	cmp	r3, #34	; 0x22
 800417c:	f040 8099 	bne.w	80042b2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004188:	d117      	bne.n	80041ba <UART_Receive_IT+0x50>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d113      	bne.n	80041ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	1c9a      	adds	r2, r3, #2
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	629a      	str	r2, [r3, #40]	; 0x28
 80041b8:	e026      	b.n	8004208 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041cc:	d007      	beq.n	80041de <UART_Receive_IT+0x74>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10a      	bne.n	80041ec <UART_Receive_IT+0x82>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e008      	b.n	80041fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29b      	uxth	r3, r3
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	4619      	mov	r1, r3
 8004216:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004218:	2b00      	cmp	r3, #0
 800421a:	d148      	bne.n	80042ae <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0220 	bic.w	r2, r2, #32
 800422a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800423a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	2b01      	cmp	r3, #1
 800425a:	d123      	bne.n	80042a4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0210 	bic.w	r2, r2, #16
 8004270:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b10      	cmp	r3, #16
 800427e:	d10a      	bne.n	8004296 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800429a:	4619      	mov	r1, r3
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff fe79 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
 80042a2:	e002      	b.n	80042aa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7fc f9e9 	bl	800067c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e002      	b.n	80042b4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042f6:	f023 030c 	bic.w	r3, r3, #12
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	430b      	orrs	r3, r1
 8004302:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2c      	ldr	r2, [pc, #176]	; (80043d0 <UART_SetConfig+0x114>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d103      	bne.n	800432c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004324:	f7fe fb66 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	e002      	b.n	8004332 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800432c:	f7fe fb4e 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8004330:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009a      	lsls	r2, r3, #2
 800433c:	441a      	add	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <UART_SetConfig+0x118>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	0119      	lsls	r1, r3, #4
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	009a      	lsls	r2, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	fbb2 f2f3 	udiv	r2, r2, r3
 8004368:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <UART_SetConfig+0x118>)
 800436a:	fba3 0302 	umull	r0, r3, r3, r2
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	2064      	movs	r0, #100	; 0x64
 8004372:	fb00 f303 	mul.w	r3, r0, r3
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	3332      	adds	r3, #50	; 0x32
 800437c:	4a15      	ldr	r2, [pc, #84]	; (80043d4 <UART_SetConfig+0x118>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004388:	4419      	add	r1, r3
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	009a      	lsls	r2, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	fbb2 f2f3 	udiv	r2, r2, r3
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <UART_SetConfig+0x118>)
 80043a2:	fba3 0302 	umull	r0, r3, r3, r2
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	2064      	movs	r0, #100	; 0x64
 80043aa:	fb00 f303 	mul.w	r3, r0, r3
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	3332      	adds	r3, #50	; 0x32
 80043b4:	4a07      	ldr	r2, [pc, #28]	; (80043d4 <UART_SetConfig+0x118>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	f003 020f 	and.w	r2, r3, #15
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	440a      	add	r2, r1
 80043c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40013800 	.word	0x40013800
 80043d4:	51eb851f 	.word	0x51eb851f

080043d8 <__errno>:
 80043d8:	4b01      	ldr	r3, [pc, #4]	; (80043e0 <__errno+0x8>)
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	2000000c 	.word	0x2000000c

080043e4 <__libc_init_array>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	2600      	movs	r6, #0
 80043e8:	4d0c      	ldr	r5, [pc, #48]	; (800441c <__libc_init_array+0x38>)
 80043ea:	4c0d      	ldr	r4, [pc, #52]	; (8004420 <__libc_init_array+0x3c>)
 80043ec:	1b64      	subs	r4, r4, r5
 80043ee:	10a4      	asrs	r4, r4, #2
 80043f0:	42a6      	cmp	r6, r4
 80043f2:	d109      	bne.n	8004408 <__libc_init_array+0x24>
 80043f4:	f000 fc9c 	bl	8004d30 <_init>
 80043f8:	2600      	movs	r6, #0
 80043fa:	4d0a      	ldr	r5, [pc, #40]	; (8004424 <__libc_init_array+0x40>)
 80043fc:	4c0a      	ldr	r4, [pc, #40]	; (8004428 <__libc_init_array+0x44>)
 80043fe:	1b64      	subs	r4, r4, r5
 8004400:	10a4      	asrs	r4, r4, #2
 8004402:	42a6      	cmp	r6, r4
 8004404:	d105      	bne.n	8004412 <__libc_init_array+0x2e>
 8004406:	bd70      	pop	{r4, r5, r6, pc}
 8004408:	f855 3b04 	ldr.w	r3, [r5], #4
 800440c:	4798      	blx	r3
 800440e:	3601      	adds	r6, #1
 8004410:	e7ee      	b.n	80043f0 <__libc_init_array+0xc>
 8004412:	f855 3b04 	ldr.w	r3, [r5], #4
 8004416:	4798      	blx	r3
 8004418:	3601      	adds	r6, #1
 800441a:	e7f2      	b.n	8004402 <__libc_init_array+0x1e>
 800441c:	08004dbc 	.word	0x08004dbc
 8004420:	08004dbc 	.word	0x08004dbc
 8004424:	08004dbc 	.word	0x08004dbc
 8004428:	08004dc0 	.word	0x08004dc0

0800442c <memset>:
 800442c:	4603      	mov	r3, r0
 800442e:	4402      	add	r2, r0
 8004430:	4293      	cmp	r3, r2
 8004432:	d100      	bne.n	8004436 <memset+0xa>
 8004434:	4770      	bx	lr
 8004436:	f803 1b01 	strb.w	r1, [r3], #1
 800443a:	e7f9      	b.n	8004430 <memset+0x4>

0800443c <siprintf>:
 800443c:	b40e      	push	{r1, r2, r3}
 800443e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004442:	b500      	push	{lr}
 8004444:	b09c      	sub	sp, #112	; 0x70
 8004446:	ab1d      	add	r3, sp, #116	; 0x74
 8004448:	9002      	str	r0, [sp, #8]
 800444a:	9006      	str	r0, [sp, #24]
 800444c:	9107      	str	r1, [sp, #28]
 800444e:	9104      	str	r1, [sp, #16]
 8004450:	4808      	ldr	r0, [pc, #32]	; (8004474 <siprintf+0x38>)
 8004452:	4909      	ldr	r1, [pc, #36]	; (8004478 <siprintf+0x3c>)
 8004454:	f853 2b04 	ldr.w	r2, [r3], #4
 8004458:	9105      	str	r1, [sp, #20]
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	a902      	add	r1, sp, #8
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	f000 f868 	bl	8004534 <_svfiprintf_r>
 8004464:	2200      	movs	r2, #0
 8004466:	9b02      	ldr	r3, [sp, #8]
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	b01c      	add	sp, #112	; 0x70
 800446c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004470:	b003      	add	sp, #12
 8004472:	4770      	bx	lr
 8004474:	2000000c 	.word	0x2000000c
 8004478:	ffff0208 	.word	0xffff0208

0800447c <__ssputs_r>:
 800447c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004480:	688e      	ldr	r6, [r1, #8]
 8004482:	4682      	mov	sl, r0
 8004484:	429e      	cmp	r6, r3
 8004486:	460c      	mov	r4, r1
 8004488:	4690      	mov	r8, r2
 800448a:	461f      	mov	r7, r3
 800448c:	d838      	bhi.n	8004500 <__ssputs_r+0x84>
 800448e:	898a      	ldrh	r2, [r1, #12]
 8004490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004494:	d032      	beq.n	80044fc <__ssputs_r+0x80>
 8004496:	6825      	ldr	r5, [r4, #0]
 8004498:	6909      	ldr	r1, [r1, #16]
 800449a:	3301      	adds	r3, #1
 800449c:	eba5 0901 	sub.w	r9, r5, r1
 80044a0:	6965      	ldr	r5, [r4, #20]
 80044a2:	444b      	add	r3, r9
 80044a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044ac:	106d      	asrs	r5, r5, #1
 80044ae:	429d      	cmp	r5, r3
 80044b0:	bf38      	it	cc
 80044b2:	461d      	movcc	r5, r3
 80044b4:	0553      	lsls	r3, r2, #21
 80044b6:	d531      	bpl.n	800451c <__ssputs_r+0xa0>
 80044b8:	4629      	mov	r1, r5
 80044ba:	f000 fb6f 	bl	8004b9c <_malloc_r>
 80044be:	4606      	mov	r6, r0
 80044c0:	b950      	cbnz	r0, 80044d8 <__ssputs_r+0x5c>
 80044c2:	230c      	movs	r3, #12
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	f8ca 3000 	str.w	r3, [sl]
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d8:	464a      	mov	r2, r9
 80044da:	6921      	ldr	r1, [r4, #16]
 80044dc:	f000 face 	bl	8004a7c <memcpy>
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ea:	81a3      	strh	r3, [r4, #12]
 80044ec:	6126      	str	r6, [r4, #16]
 80044ee:	444e      	add	r6, r9
 80044f0:	6026      	str	r6, [r4, #0]
 80044f2:	463e      	mov	r6, r7
 80044f4:	6165      	str	r5, [r4, #20]
 80044f6:	eba5 0509 	sub.w	r5, r5, r9
 80044fa:	60a5      	str	r5, [r4, #8]
 80044fc:	42be      	cmp	r6, r7
 80044fe:	d900      	bls.n	8004502 <__ssputs_r+0x86>
 8004500:	463e      	mov	r6, r7
 8004502:	4632      	mov	r2, r6
 8004504:	4641      	mov	r1, r8
 8004506:	6820      	ldr	r0, [r4, #0]
 8004508:	f000 fac6 	bl	8004a98 <memmove>
 800450c:	68a3      	ldr	r3, [r4, #8]
 800450e:	2000      	movs	r0, #0
 8004510:	1b9b      	subs	r3, r3, r6
 8004512:	60a3      	str	r3, [r4, #8]
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	4433      	add	r3, r6
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	e7db      	b.n	80044d4 <__ssputs_r+0x58>
 800451c:	462a      	mov	r2, r5
 800451e:	f000 fbb1 	bl	8004c84 <_realloc_r>
 8004522:	4606      	mov	r6, r0
 8004524:	2800      	cmp	r0, #0
 8004526:	d1e1      	bne.n	80044ec <__ssputs_r+0x70>
 8004528:	4650      	mov	r0, sl
 800452a:	6921      	ldr	r1, [r4, #16]
 800452c:	f000 face 	bl	8004acc <_free_r>
 8004530:	e7c7      	b.n	80044c2 <__ssputs_r+0x46>
	...

08004534 <_svfiprintf_r>:
 8004534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004538:	4698      	mov	r8, r3
 800453a:	898b      	ldrh	r3, [r1, #12]
 800453c:	4607      	mov	r7, r0
 800453e:	061b      	lsls	r3, r3, #24
 8004540:	460d      	mov	r5, r1
 8004542:	4614      	mov	r4, r2
 8004544:	b09d      	sub	sp, #116	; 0x74
 8004546:	d50e      	bpl.n	8004566 <_svfiprintf_r+0x32>
 8004548:	690b      	ldr	r3, [r1, #16]
 800454a:	b963      	cbnz	r3, 8004566 <_svfiprintf_r+0x32>
 800454c:	2140      	movs	r1, #64	; 0x40
 800454e:	f000 fb25 	bl	8004b9c <_malloc_r>
 8004552:	6028      	str	r0, [r5, #0]
 8004554:	6128      	str	r0, [r5, #16]
 8004556:	b920      	cbnz	r0, 8004562 <_svfiprintf_r+0x2e>
 8004558:	230c      	movs	r3, #12
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	e0d1      	b.n	8004706 <_svfiprintf_r+0x1d2>
 8004562:	2340      	movs	r3, #64	; 0x40
 8004564:	616b      	str	r3, [r5, #20]
 8004566:	2300      	movs	r3, #0
 8004568:	9309      	str	r3, [sp, #36]	; 0x24
 800456a:	2320      	movs	r3, #32
 800456c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004570:	2330      	movs	r3, #48	; 0x30
 8004572:	f04f 0901 	mov.w	r9, #1
 8004576:	f8cd 800c 	str.w	r8, [sp, #12]
 800457a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004720 <_svfiprintf_r+0x1ec>
 800457e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004582:	4623      	mov	r3, r4
 8004584:	469a      	mov	sl, r3
 8004586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800458a:	b10a      	cbz	r2, 8004590 <_svfiprintf_r+0x5c>
 800458c:	2a25      	cmp	r2, #37	; 0x25
 800458e:	d1f9      	bne.n	8004584 <_svfiprintf_r+0x50>
 8004590:	ebba 0b04 	subs.w	fp, sl, r4
 8004594:	d00b      	beq.n	80045ae <_svfiprintf_r+0x7a>
 8004596:	465b      	mov	r3, fp
 8004598:	4622      	mov	r2, r4
 800459a:	4629      	mov	r1, r5
 800459c:	4638      	mov	r0, r7
 800459e:	f7ff ff6d 	bl	800447c <__ssputs_r>
 80045a2:	3001      	adds	r0, #1
 80045a4:	f000 80aa 	beq.w	80046fc <_svfiprintf_r+0x1c8>
 80045a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045aa:	445a      	add	r2, fp
 80045ac:	9209      	str	r2, [sp, #36]	; 0x24
 80045ae:	f89a 3000 	ldrb.w	r3, [sl]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80a2 	beq.w	80046fc <_svfiprintf_r+0x1c8>
 80045b8:	2300      	movs	r3, #0
 80045ba:	f04f 32ff 	mov.w	r2, #4294967295
 80045be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045c2:	f10a 0a01 	add.w	sl, sl, #1
 80045c6:	9304      	str	r3, [sp, #16]
 80045c8:	9307      	str	r3, [sp, #28]
 80045ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045ce:	931a      	str	r3, [sp, #104]	; 0x68
 80045d0:	4654      	mov	r4, sl
 80045d2:	2205      	movs	r2, #5
 80045d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d8:	4851      	ldr	r0, [pc, #324]	; (8004720 <_svfiprintf_r+0x1ec>)
 80045da:	f000 fa41 	bl	8004a60 <memchr>
 80045de:	9a04      	ldr	r2, [sp, #16]
 80045e0:	b9d8      	cbnz	r0, 800461a <_svfiprintf_r+0xe6>
 80045e2:	06d0      	lsls	r0, r2, #27
 80045e4:	bf44      	itt	mi
 80045e6:	2320      	movmi	r3, #32
 80045e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045ec:	0711      	lsls	r1, r2, #28
 80045ee:	bf44      	itt	mi
 80045f0:	232b      	movmi	r3, #43	; 0x2b
 80045f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045f6:	f89a 3000 	ldrb.w	r3, [sl]
 80045fa:	2b2a      	cmp	r3, #42	; 0x2a
 80045fc:	d015      	beq.n	800462a <_svfiprintf_r+0xf6>
 80045fe:	4654      	mov	r4, sl
 8004600:	2000      	movs	r0, #0
 8004602:	f04f 0c0a 	mov.w	ip, #10
 8004606:	9a07      	ldr	r2, [sp, #28]
 8004608:	4621      	mov	r1, r4
 800460a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800460e:	3b30      	subs	r3, #48	; 0x30
 8004610:	2b09      	cmp	r3, #9
 8004612:	d94e      	bls.n	80046b2 <_svfiprintf_r+0x17e>
 8004614:	b1b0      	cbz	r0, 8004644 <_svfiprintf_r+0x110>
 8004616:	9207      	str	r2, [sp, #28]
 8004618:	e014      	b.n	8004644 <_svfiprintf_r+0x110>
 800461a:	eba0 0308 	sub.w	r3, r0, r8
 800461e:	fa09 f303 	lsl.w	r3, r9, r3
 8004622:	4313      	orrs	r3, r2
 8004624:	46a2      	mov	sl, r4
 8004626:	9304      	str	r3, [sp, #16]
 8004628:	e7d2      	b.n	80045d0 <_svfiprintf_r+0x9c>
 800462a:	9b03      	ldr	r3, [sp, #12]
 800462c:	1d19      	adds	r1, r3, #4
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	9103      	str	r1, [sp, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	bfbb      	ittet	lt
 8004636:	425b      	neglt	r3, r3
 8004638:	f042 0202 	orrlt.w	r2, r2, #2
 800463c:	9307      	strge	r3, [sp, #28]
 800463e:	9307      	strlt	r3, [sp, #28]
 8004640:	bfb8      	it	lt
 8004642:	9204      	strlt	r2, [sp, #16]
 8004644:	7823      	ldrb	r3, [r4, #0]
 8004646:	2b2e      	cmp	r3, #46	; 0x2e
 8004648:	d10c      	bne.n	8004664 <_svfiprintf_r+0x130>
 800464a:	7863      	ldrb	r3, [r4, #1]
 800464c:	2b2a      	cmp	r3, #42	; 0x2a
 800464e:	d135      	bne.n	80046bc <_svfiprintf_r+0x188>
 8004650:	9b03      	ldr	r3, [sp, #12]
 8004652:	3402      	adds	r4, #2
 8004654:	1d1a      	adds	r2, r3, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	9203      	str	r2, [sp, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	bfb8      	it	lt
 800465e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004662:	9305      	str	r3, [sp, #20]
 8004664:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004724 <_svfiprintf_r+0x1f0>
 8004668:	2203      	movs	r2, #3
 800466a:	4650      	mov	r0, sl
 800466c:	7821      	ldrb	r1, [r4, #0]
 800466e:	f000 f9f7 	bl	8004a60 <memchr>
 8004672:	b140      	cbz	r0, 8004686 <_svfiprintf_r+0x152>
 8004674:	2340      	movs	r3, #64	; 0x40
 8004676:	eba0 000a 	sub.w	r0, r0, sl
 800467a:	fa03 f000 	lsl.w	r0, r3, r0
 800467e:	9b04      	ldr	r3, [sp, #16]
 8004680:	3401      	adds	r4, #1
 8004682:	4303      	orrs	r3, r0
 8004684:	9304      	str	r3, [sp, #16]
 8004686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800468a:	2206      	movs	r2, #6
 800468c:	4826      	ldr	r0, [pc, #152]	; (8004728 <_svfiprintf_r+0x1f4>)
 800468e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004692:	f000 f9e5 	bl	8004a60 <memchr>
 8004696:	2800      	cmp	r0, #0
 8004698:	d038      	beq.n	800470c <_svfiprintf_r+0x1d8>
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <_svfiprintf_r+0x1f8>)
 800469c:	bb1b      	cbnz	r3, 80046e6 <_svfiprintf_r+0x1b2>
 800469e:	9b03      	ldr	r3, [sp, #12]
 80046a0:	3307      	adds	r3, #7
 80046a2:	f023 0307 	bic.w	r3, r3, #7
 80046a6:	3308      	adds	r3, #8
 80046a8:	9303      	str	r3, [sp, #12]
 80046aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ac:	4433      	add	r3, r6
 80046ae:	9309      	str	r3, [sp, #36]	; 0x24
 80046b0:	e767      	b.n	8004582 <_svfiprintf_r+0x4e>
 80046b2:	460c      	mov	r4, r1
 80046b4:	2001      	movs	r0, #1
 80046b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80046ba:	e7a5      	b.n	8004608 <_svfiprintf_r+0xd4>
 80046bc:	2300      	movs	r3, #0
 80046be:	f04f 0c0a 	mov.w	ip, #10
 80046c2:	4619      	mov	r1, r3
 80046c4:	3401      	adds	r4, #1
 80046c6:	9305      	str	r3, [sp, #20]
 80046c8:	4620      	mov	r0, r4
 80046ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046ce:	3a30      	subs	r2, #48	; 0x30
 80046d0:	2a09      	cmp	r2, #9
 80046d2:	d903      	bls.n	80046dc <_svfiprintf_r+0x1a8>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0c5      	beq.n	8004664 <_svfiprintf_r+0x130>
 80046d8:	9105      	str	r1, [sp, #20]
 80046da:	e7c3      	b.n	8004664 <_svfiprintf_r+0x130>
 80046dc:	4604      	mov	r4, r0
 80046de:	2301      	movs	r3, #1
 80046e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80046e4:	e7f0      	b.n	80046c8 <_svfiprintf_r+0x194>
 80046e6:	ab03      	add	r3, sp, #12
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	462a      	mov	r2, r5
 80046ec:	4638      	mov	r0, r7
 80046ee:	4b10      	ldr	r3, [pc, #64]	; (8004730 <_svfiprintf_r+0x1fc>)
 80046f0:	a904      	add	r1, sp, #16
 80046f2:	f3af 8000 	nop.w
 80046f6:	1c42      	adds	r2, r0, #1
 80046f8:	4606      	mov	r6, r0
 80046fa:	d1d6      	bne.n	80046aa <_svfiprintf_r+0x176>
 80046fc:	89ab      	ldrh	r3, [r5, #12]
 80046fe:	065b      	lsls	r3, r3, #25
 8004700:	f53f af2c 	bmi.w	800455c <_svfiprintf_r+0x28>
 8004704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004706:	b01d      	add	sp, #116	; 0x74
 8004708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800470c:	ab03      	add	r3, sp, #12
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	462a      	mov	r2, r5
 8004712:	4638      	mov	r0, r7
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <_svfiprintf_r+0x1fc>)
 8004716:	a904      	add	r1, sp, #16
 8004718:	f000 f87c 	bl	8004814 <_printf_i>
 800471c:	e7eb      	b.n	80046f6 <_svfiprintf_r+0x1c2>
 800471e:	bf00      	nop
 8004720:	08004d88 	.word	0x08004d88
 8004724:	08004d8e 	.word	0x08004d8e
 8004728:	08004d92 	.word	0x08004d92
 800472c:	00000000 	.word	0x00000000
 8004730:	0800447d 	.word	0x0800447d

08004734 <_printf_common>:
 8004734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004738:	4616      	mov	r6, r2
 800473a:	4699      	mov	r9, r3
 800473c:	688a      	ldr	r2, [r1, #8]
 800473e:	690b      	ldr	r3, [r1, #16]
 8004740:	4607      	mov	r7, r0
 8004742:	4293      	cmp	r3, r2
 8004744:	bfb8      	it	lt
 8004746:	4613      	movlt	r3, r2
 8004748:	6033      	str	r3, [r6, #0]
 800474a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800474e:	460c      	mov	r4, r1
 8004750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004754:	b10a      	cbz	r2, 800475a <_printf_common+0x26>
 8004756:	3301      	adds	r3, #1
 8004758:	6033      	str	r3, [r6, #0]
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	0699      	lsls	r1, r3, #26
 800475e:	bf42      	ittt	mi
 8004760:	6833      	ldrmi	r3, [r6, #0]
 8004762:	3302      	addmi	r3, #2
 8004764:	6033      	strmi	r3, [r6, #0]
 8004766:	6825      	ldr	r5, [r4, #0]
 8004768:	f015 0506 	ands.w	r5, r5, #6
 800476c:	d106      	bne.n	800477c <_printf_common+0x48>
 800476e:	f104 0a19 	add.w	sl, r4, #25
 8004772:	68e3      	ldr	r3, [r4, #12]
 8004774:	6832      	ldr	r2, [r6, #0]
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	42ab      	cmp	r3, r5
 800477a:	dc28      	bgt.n	80047ce <_printf_common+0x9a>
 800477c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004780:	1e13      	subs	r3, r2, #0
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	bf18      	it	ne
 8004786:	2301      	movne	r3, #1
 8004788:	0692      	lsls	r2, r2, #26
 800478a:	d42d      	bmi.n	80047e8 <_printf_common+0xb4>
 800478c:	4649      	mov	r1, r9
 800478e:	4638      	mov	r0, r7
 8004790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004794:	47c0      	blx	r8
 8004796:	3001      	adds	r0, #1
 8004798:	d020      	beq.n	80047dc <_printf_common+0xa8>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	68e5      	ldr	r5, [r4, #12]
 800479e:	f003 0306 	and.w	r3, r3, #6
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	bf18      	it	ne
 80047a6:	2500      	movne	r5, #0
 80047a8:	6832      	ldr	r2, [r6, #0]
 80047aa:	f04f 0600 	mov.w	r6, #0
 80047ae:	68a3      	ldr	r3, [r4, #8]
 80047b0:	bf08      	it	eq
 80047b2:	1aad      	subeq	r5, r5, r2
 80047b4:	6922      	ldr	r2, [r4, #16]
 80047b6:	bf08      	it	eq
 80047b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047bc:	4293      	cmp	r3, r2
 80047be:	bfc4      	itt	gt
 80047c0:	1a9b      	subgt	r3, r3, r2
 80047c2:	18ed      	addgt	r5, r5, r3
 80047c4:	341a      	adds	r4, #26
 80047c6:	42b5      	cmp	r5, r6
 80047c8:	d11a      	bne.n	8004800 <_printf_common+0xcc>
 80047ca:	2000      	movs	r0, #0
 80047cc:	e008      	b.n	80047e0 <_printf_common+0xac>
 80047ce:	2301      	movs	r3, #1
 80047d0:	4652      	mov	r2, sl
 80047d2:	4649      	mov	r1, r9
 80047d4:	4638      	mov	r0, r7
 80047d6:	47c0      	blx	r8
 80047d8:	3001      	adds	r0, #1
 80047da:	d103      	bne.n	80047e4 <_printf_common+0xb0>
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295
 80047e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e4:	3501      	adds	r5, #1
 80047e6:	e7c4      	b.n	8004772 <_printf_common+0x3e>
 80047e8:	2030      	movs	r0, #48	; 0x30
 80047ea:	18e1      	adds	r1, r4, r3
 80047ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047f6:	4422      	add	r2, r4
 80047f8:	3302      	adds	r3, #2
 80047fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047fe:	e7c5      	b.n	800478c <_printf_common+0x58>
 8004800:	2301      	movs	r3, #1
 8004802:	4622      	mov	r2, r4
 8004804:	4649      	mov	r1, r9
 8004806:	4638      	mov	r0, r7
 8004808:	47c0      	blx	r8
 800480a:	3001      	adds	r0, #1
 800480c:	d0e6      	beq.n	80047dc <_printf_common+0xa8>
 800480e:	3601      	adds	r6, #1
 8004810:	e7d9      	b.n	80047c6 <_printf_common+0x92>
	...

08004814 <_printf_i>:
 8004814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004818:	7e0f      	ldrb	r7, [r1, #24]
 800481a:	4691      	mov	r9, r2
 800481c:	2f78      	cmp	r7, #120	; 0x78
 800481e:	4680      	mov	r8, r0
 8004820:	460c      	mov	r4, r1
 8004822:	469a      	mov	sl, r3
 8004824:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004826:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800482a:	d807      	bhi.n	800483c <_printf_i+0x28>
 800482c:	2f62      	cmp	r7, #98	; 0x62
 800482e:	d80a      	bhi.n	8004846 <_printf_i+0x32>
 8004830:	2f00      	cmp	r7, #0
 8004832:	f000 80d9 	beq.w	80049e8 <_printf_i+0x1d4>
 8004836:	2f58      	cmp	r7, #88	; 0x58
 8004838:	f000 80a4 	beq.w	8004984 <_printf_i+0x170>
 800483c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004844:	e03a      	b.n	80048bc <_printf_i+0xa8>
 8004846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800484a:	2b15      	cmp	r3, #21
 800484c:	d8f6      	bhi.n	800483c <_printf_i+0x28>
 800484e:	a101      	add	r1, pc, #4	; (adr r1, 8004854 <_printf_i+0x40>)
 8004850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004854:	080048ad 	.word	0x080048ad
 8004858:	080048c1 	.word	0x080048c1
 800485c:	0800483d 	.word	0x0800483d
 8004860:	0800483d 	.word	0x0800483d
 8004864:	0800483d 	.word	0x0800483d
 8004868:	0800483d 	.word	0x0800483d
 800486c:	080048c1 	.word	0x080048c1
 8004870:	0800483d 	.word	0x0800483d
 8004874:	0800483d 	.word	0x0800483d
 8004878:	0800483d 	.word	0x0800483d
 800487c:	0800483d 	.word	0x0800483d
 8004880:	080049cf 	.word	0x080049cf
 8004884:	080048f1 	.word	0x080048f1
 8004888:	080049b1 	.word	0x080049b1
 800488c:	0800483d 	.word	0x0800483d
 8004890:	0800483d 	.word	0x0800483d
 8004894:	080049f1 	.word	0x080049f1
 8004898:	0800483d 	.word	0x0800483d
 800489c:	080048f1 	.word	0x080048f1
 80048a0:	0800483d 	.word	0x0800483d
 80048a4:	0800483d 	.word	0x0800483d
 80048a8:	080049b9 	.word	0x080049b9
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	1d1a      	adds	r2, r3, #4
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	602a      	str	r2, [r5, #0]
 80048b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048bc:	2301      	movs	r3, #1
 80048be:	e0a4      	b.n	8004a0a <_printf_i+0x1f6>
 80048c0:	6820      	ldr	r0, [r4, #0]
 80048c2:	6829      	ldr	r1, [r5, #0]
 80048c4:	0606      	lsls	r6, r0, #24
 80048c6:	f101 0304 	add.w	r3, r1, #4
 80048ca:	d50a      	bpl.n	80048e2 <_printf_i+0xce>
 80048cc:	680e      	ldr	r6, [r1, #0]
 80048ce:	602b      	str	r3, [r5, #0]
 80048d0:	2e00      	cmp	r6, #0
 80048d2:	da03      	bge.n	80048dc <_printf_i+0xc8>
 80048d4:	232d      	movs	r3, #45	; 0x2d
 80048d6:	4276      	negs	r6, r6
 80048d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048dc:	230a      	movs	r3, #10
 80048de:	485e      	ldr	r0, [pc, #376]	; (8004a58 <_printf_i+0x244>)
 80048e0:	e019      	b.n	8004916 <_printf_i+0x102>
 80048e2:	680e      	ldr	r6, [r1, #0]
 80048e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048e8:	602b      	str	r3, [r5, #0]
 80048ea:	bf18      	it	ne
 80048ec:	b236      	sxthne	r6, r6
 80048ee:	e7ef      	b.n	80048d0 <_printf_i+0xbc>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	6820      	ldr	r0, [r4, #0]
 80048f4:	1d19      	adds	r1, r3, #4
 80048f6:	6029      	str	r1, [r5, #0]
 80048f8:	0601      	lsls	r1, r0, #24
 80048fa:	d501      	bpl.n	8004900 <_printf_i+0xec>
 80048fc:	681e      	ldr	r6, [r3, #0]
 80048fe:	e002      	b.n	8004906 <_printf_i+0xf2>
 8004900:	0646      	lsls	r6, r0, #25
 8004902:	d5fb      	bpl.n	80048fc <_printf_i+0xe8>
 8004904:	881e      	ldrh	r6, [r3, #0]
 8004906:	2f6f      	cmp	r7, #111	; 0x6f
 8004908:	bf0c      	ite	eq
 800490a:	2308      	moveq	r3, #8
 800490c:	230a      	movne	r3, #10
 800490e:	4852      	ldr	r0, [pc, #328]	; (8004a58 <_printf_i+0x244>)
 8004910:	2100      	movs	r1, #0
 8004912:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004916:	6865      	ldr	r5, [r4, #4]
 8004918:	2d00      	cmp	r5, #0
 800491a:	bfa8      	it	ge
 800491c:	6821      	ldrge	r1, [r4, #0]
 800491e:	60a5      	str	r5, [r4, #8]
 8004920:	bfa4      	itt	ge
 8004922:	f021 0104 	bicge.w	r1, r1, #4
 8004926:	6021      	strge	r1, [r4, #0]
 8004928:	b90e      	cbnz	r6, 800492e <_printf_i+0x11a>
 800492a:	2d00      	cmp	r5, #0
 800492c:	d04d      	beq.n	80049ca <_printf_i+0x1b6>
 800492e:	4615      	mov	r5, r2
 8004930:	fbb6 f1f3 	udiv	r1, r6, r3
 8004934:	fb03 6711 	mls	r7, r3, r1, r6
 8004938:	5dc7      	ldrb	r7, [r0, r7]
 800493a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800493e:	4637      	mov	r7, r6
 8004940:	42bb      	cmp	r3, r7
 8004942:	460e      	mov	r6, r1
 8004944:	d9f4      	bls.n	8004930 <_printf_i+0x11c>
 8004946:	2b08      	cmp	r3, #8
 8004948:	d10b      	bne.n	8004962 <_printf_i+0x14e>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	07de      	lsls	r6, r3, #31
 800494e:	d508      	bpl.n	8004962 <_printf_i+0x14e>
 8004950:	6923      	ldr	r3, [r4, #16]
 8004952:	6861      	ldr	r1, [r4, #4]
 8004954:	4299      	cmp	r1, r3
 8004956:	bfde      	ittt	le
 8004958:	2330      	movle	r3, #48	; 0x30
 800495a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800495e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004962:	1b52      	subs	r2, r2, r5
 8004964:	6122      	str	r2, [r4, #16]
 8004966:	464b      	mov	r3, r9
 8004968:	4621      	mov	r1, r4
 800496a:	4640      	mov	r0, r8
 800496c:	f8cd a000 	str.w	sl, [sp]
 8004970:	aa03      	add	r2, sp, #12
 8004972:	f7ff fedf 	bl	8004734 <_printf_common>
 8004976:	3001      	adds	r0, #1
 8004978:	d14c      	bne.n	8004a14 <_printf_i+0x200>
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	b004      	add	sp, #16
 8004980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004984:	4834      	ldr	r0, [pc, #208]	; (8004a58 <_printf_i+0x244>)
 8004986:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800498a:	6829      	ldr	r1, [r5, #0]
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004992:	6029      	str	r1, [r5, #0]
 8004994:	061d      	lsls	r5, r3, #24
 8004996:	d514      	bpl.n	80049c2 <_printf_i+0x1ae>
 8004998:	07df      	lsls	r7, r3, #31
 800499a:	bf44      	itt	mi
 800499c:	f043 0320 	orrmi.w	r3, r3, #32
 80049a0:	6023      	strmi	r3, [r4, #0]
 80049a2:	b91e      	cbnz	r6, 80049ac <_printf_i+0x198>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	f023 0320 	bic.w	r3, r3, #32
 80049aa:	6023      	str	r3, [r4, #0]
 80049ac:	2310      	movs	r3, #16
 80049ae:	e7af      	b.n	8004910 <_printf_i+0xfc>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	f043 0320 	orr.w	r3, r3, #32
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	2378      	movs	r3, #120	; 0x78
 80049ba:	4828      	ldr	r0, [pc, #160]	; (8004a5c <_printf_i+0x248>)
 80049bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049c0:	e7e3      	b.n	800498a <_printf_i+0x176>
 80049c2:	0659      	lsls	r1, r3, #25
 80049c4:	bf48      	it	mi
 80049c6:	b2b6      	uxthmi	r6, r6
 80049c8:	e7e6      	b.n	8004998 <_printf_i+0x184>
 80049ca:	4615      	mov	r5, r2
 80049cc:	e7bb      	b.n	8004946 <_printf_i+0x132>
 80049ce:	682b      	ldr	r3, [r5, #0]
 80049d0:	6826      	ldr	r6, [r4, #0]
 80049d2:	1d18      	adds	r0, r3, #4
 80049d4:	6961      	ldr	r1, [r4, #20]
 80049d6:	6028      	str	r0, [r5, #0]
 80049d8:	0635      	lsls	r5, r6, #24
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	d501      	bpl.n	80049e2 <_printf_i+0x1ce>
 80049de:	6019      	str	r1, [r3, #0]
 80049e0:	e002      	b.n	80049e8 <_printf_i+0x1d4>
 80049e2:	0670      	lsls	r0, r6, #25
 80049e4:	d5fb      	bpl.n	80049de <_printf_i+0x1ca>
 80049e6:	8019      	strh	r1, [r3, #0]
 80049e8:	2300      	movs	r3, #0
 80049ea:	4615      	mov	r5, r2
 80049ec:	6123      	str	r3, [r4, #16]
 80049ee:	e7ba      	b.n	8004966 <_printf_i+0x152>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	2100      	movs	r1, #0
 80049f4:	1d1a      	adds	r2, r3, #4
 80049f6:	602a      	str	r2, [r5, #0]
 80049f8:	681d      	ldr	r5, [r3, #0]
 80049fa:	6862      	ldr	r2, [r4, #4]
 80049fc:	4628      	mov	r0, r5
 80049fe:	f000 f82f 	bl	8004a60 <memchr>
 8004a02:	b108      	cbz	r0, 8004a08 <_printf_i+0x1f4>
 8004a04:	1b40      	subs	r0, r0, r5
 8004a06:	6060      	str	r0, [r4, #4]
 8004a08:	6863      	ldr	r3, [r4, #4]
 8004a0a:	6123      	str	r3, [r4, #16]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a12:	e7a8      	b.n	8004966 <_printf_i+0x152>
 8004a14:	462a      	mov	r2, r5
 8004a16:	4649      	mov	r1, r9
 8004a18:	4640      	mov	r0, r8
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	47d0      	blx	sl
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d0ab      	beq.n	800497a <_printf_i+0x166>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	079b      	lsls	r3, r3, #30
 8004a26:	d413      	bmi.n	8004a50 <_printf_i+0x23c>
 8004a28:	68e0      	ldr	r0, [r4, #12]
 8004a2a:	9b03      	ldr	r3, [sp, #12]
 8004a2c:	4298      	cmp	r0, r3
 8004a2e:	bfb8      	it	lt
 8004a30:	4618      	movlt	r0, r3
 8004a32:	e7a4      	b.n	800497e <_printf_i+0x16a>
 8004a34:	2301      	movs	r3, #1
 8004a36:	4632      	mov	r2, r6
 8004a38:	4649      	mov	r1, r9
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	47d0      	blx	sl
 8004a3e:	3001      	adds	r0, #1
 8004a40:	d09b      	beq.n	800497a <_printf_i+0x166>
 8004a42:	3501      	adds	r5, #1
 8004a44:	68e3      	ldr	r3, [r4, #12]
 8004a46:	9903      	ldr	r1, [sp, #12]
 8004a48:	1a5b      	subs	r3, r3, r1
 8004a4a:	42ab      	cmp	r3, r5
 8004a4c:	dcf2      	bgt.n	8004a34 <_printf_i+0x220>
 8004a4e:	e7eb      	b.n	8004a28 <_printf_i+0x214>
 8004a50:	2500      	movs	r5, #0
 8004a52:	f104 0619 	add.w	r6, r4, #25
 8004a56:	e7f5      	b.n	8004a44 <_printf_i+0x230>
 8004a58:	08004d99 	.word	0x08004d99
 8004a5c:	08004daa 	.word	0x08004daa

08004a60 <memchr>:
 8004a60:	4603      	mov	r3, r0
 8004a62:	b510      	push	{r4, lr}
 8004a64:	b2c9      	uxtb	r1, r1
 8004a66:	4402      	add	r2, r0
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	d101      	bne.n	8004a72 <memchr+0x12>
 8004a6e:	2000      	movs	r0, #0
 8004a70:	e003      	b.n	8004a7a <memchr+0x1a>
 8004a72:	7804      	ldrb	r4, [r0, #0]
 8004a74:	3301      	adds	r3, #1
 8004a76:	428c      	cmp	r4, r1
 8004a78:	d1f6      	bne.n	8004a68 <memchr+0x8>
 8004a7a:	bd10      	pop	{r4, pc}

08004a7c <memcpy>:
 8004a7c:	440a      	add	r2, r1
 8004a7e:	4291      	cmp	r1, r2
 8004a80:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a84:	d100      	bne.n	8004a88 <memcpy+0xc>
 8004a86:	4770      	bx	lr
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a8e:	4291      	cmp	r1, r2
 8004a90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a94:	d1f9      	bne.n	8004a8a <memcpy+0xe>
 8004a96:	bd10      	pop	{r4, pc}

08004a98 <memmove>:
 8004a98:	4288      	cmp	r0, r1
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	eb01 0402 	add.w	r4, r1, r2
 8004aa0:	d902      	bls.n	8004aa8 <memmove+0x10>
 8004aa2:	4284      	cmp	r4, r0
 8004aa4:	4623      	mov	r3, r4
 8004aa6:	d807      	bhi.n	8004ab8 <memmove+0x20>
 8004aa8:	1e43      	subs	r3, r0, #1
 8004aaa:	42a1      	cmp	r1, r4
 8004aac:	d008      	beq.n	8004ac0 <memmove+0x28>
 8004aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ab6:	e7f8      	b.n	8004aaa <memmove+0x12>
 8004ab8:	4601      	mov	r1, r0
 8004aba:	4402      	add	r2, r0
 8004abc:	428a      	cmp	r2, r1
 8004abe:	d100      	bne.n	8004ac2 <memmove+0x2a>
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004aca:	e7f7      	b.n	8004abc <memmove+0x24>

08004acc <_free_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4605      	mov	r5, r0
 8004ad0:	2900      	cmp	r1, #0
 8004ad2:	d040      	beq.n	8004b56 <_free_r+0x8a>
 8004ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad8:	1f0c      	subs	r4, r1, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bfb8      	it	lt
 8004ade:	18e4      	addlt	r4, r4, r3
 8004ae0:	f000 f910 	bl	8004d04 <__malloc_lock>
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <_free_r+0x8c>)
 8004ae6:	6813      	ldr	r3, [r2, #0]
 8004ae8:	b933      	cbnz	r3, 8004af8 <_free_r+0x2c>
 8004aea:	6063      	str	r3, [r4, #4]
 8004aec:	6014      	str	r4, [r2, #0]
 8004aee:	4628      	mov	r0, r5
 8004af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004af4:	f000 b90c 	b.w	8004d10 <__malloc_unlock>
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	d908      	bls.n	8004b0e <_free_r+0x42>
 8004afc:	6820      	ldr	r0, [r4, #0]
 8004afe:	1821      	adds	r1, r4, r0
 8004b00:	428b      	cmp	r3, r1
 8004b02:	bf01      	itttt	eq
 8004b04:	6819      	ldreq	r1, [r3, #0]
 8004b06:	685b      	ldreq	r3, [r3, #4]
 8004b08:	1809      	addeq	r1, r1, r0
 8004b0a:	6021      	streq	r1, [r4, #0]
 8004b0c:	e7ed      	b.n	8004aea <_free_r+0x1e>
 8004b0e:	461a      	mov	r2, r3
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	b10b      	cbz	r3, 8004b18 <_free_r+0x4c>
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	d9fa      	bls.n	8004b0e <_free_r+0x42>
 8004b18:	6811      	ldr	r1, [r2, #0]
 8004b1a:	1850      	adds	r0, r2, r1
 8004b1c:	42a0      	cmp	r0, r4
 8004b1e:	d10b      	bne.n	8004b38 <_free_r+0x6c>
 8004b20:	6820      	ldr	r0, [r4, #0]
 8004b22:	4401      	add	r1, r0
 8004b24:	1850      	adds	r0, r2, r1
 8004b26:	4283      	cmp	r3, r0
 8004b28:	6011      	str	r1, [r2, #0]
 8004b2a:	d1e0      	bne.n	8004aee <_free_r+0x22>
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4401      	add	r1, r0
 8004b32:	6011      	str	r1, [r2, #0]
 8004b34:	6053      	str	r3, [r2, #4]
 8004b36:	e7da      	b.n	8004aee <_free_r+0x22>
 8004b38:	d902      	bls.n	8004b40 <_free_r+0x74>
 8004b3a:	230c      	movs	r3, #12
 8004b3c:	602b      	str	r3, [r5, #0]
 8004b3e:	e7d6      	b.n	8004aee <_free_r+0x22>
 8004b40:	6820      	ldr	r0, [r4, #0]
 8004b42:	1821      	adds	r1, r4, r0
 8004b44:	428b      	cmp	r3, r1
 8004b46:	bf01      	itttt	eq
 8004b48:	6819      	ldreq	r1, [r3, #0]
 8004b4a:	685b      	ldreq	r3, [r3, #4]
 8004b4c:	1809      	addeq	r1, r1, r0
 8004b4e:	6021      	streq	r1, [r4, #0]
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	6054      	str	r4, [r2, #4]
 8004b54:	e7cb      	b.n	8004aee <_free_r+0x22>
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	20000248 	.word	0x20000248

08004b5c <sbrk_aligned>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4e0e      	ldr	r6, [pc, #56]	; (8004b98 <sbrk_aligned+0x3c>)
 8004b60:	460c      	mov	r4, r1
 8004b62:	6831      	ldr	r1, [r6, #0]
 8004b64:	4605      	mov	r5, r0
 8004b66:	b911      	cbnz	r1, 8004b6e <sbrk_aligned+0x12>
 8004b68:	f000 f8bc 	bl	8004ce4 <_sbrk_r>
 8004b6c:	6030      	str	r0, [r6, #0]
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 f8b7 	bl	8004ce4 <_sbrk_r>
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	d00a      	beq.n	8004b90 <sbrk_aligned+0x34>
 8004b7a:	1cc4      	adds	r4, r0, #3
 8004b7c:	f024 0403 	bic.w	r4, r4, #3
 8004b80:	42a0      	cmp	r0, r4
 8004b82:	d007      	beq.n	8004b94 <sbrk_aligned+0x38>
 8004b84:	1a21      	subs	r1, r4, r0
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 f8ac 	bl	8004ce4 <_sbrk_r>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d101      	bne.n	8004b94 <sbrk_aligned+0x38>
 8004b90:	f04f 34ff 	mov.w	r4, #4294967295
 8004b94:	4620      	mov	r0, r4
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	2000024c 	.word	0x2000024c

08004b9c <_malloc_r>:
 8004b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba0:	1ccd      	adds	r5, r1, #3
 8004ba2:	f025 0503 	bic.w	r5, r5, #3
 8004ba6:	3508      	adds	r5, #8
 8004ba8:	2d0c      	cmp	r5, #12
 8004baa:	bf38      	it	cc
 8004bac:	250c      	movcc	r5, #12
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	db01      	blt.n	8004bb8 <_malloc_r+0x1c>
 8004bb4:	42a9      	cmp	r1, r5
 8004bb6:	d905      	bls.n	8004bc4 <_malloc_r+0x28>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	2600      	movs	r6, #0
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc4:	4e2e      	ldr	r6, [pc, #184]	; (8004c80 <_malloc_r+0xe4>)
 8004bc6:	f000 f89d 	bl	8004d04 <__malloc_lock>
 8004bca:	6833      	ldr	r3, [r6, #0]
 8004bcc:	461c      	mov	r4, r3
 8004bce:	bb34      	cbnz	r4, 8004c1e <_malloc_r+0x82>
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f7ff ffc2 	bl	8004b5c <sbrk_aligned>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	4604      	mov	r4, r0
 8004bdc:	d14d      	bne.n	8004c7a <_malloc_r+0xde>
 8004bde:	6834      	ldr	r4, [r6, #0]
 8004be0:	4626      	mov	r6, r4
 8004be2:	2e00      	cmp	r6, #0
 8004be4:	d140      	bne.n	8004c68 <_malloc_r+0xcc>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	4631      	mov	r1, r6
 8004bea:	4638      	mov	r0, r7
 8004bec:	eb04 0803 	add.w	r8, r4, r3
 8004bf0:	f000 f878 	bl	8004ce4 <_sbrk_r>
 8004bf4:	4580      	cmp	r8, r0
 8004bf6:	d13a      	bne.n	8004c6e <_malloc_r+0xd2>
 8004bf8:	6821      	ldr	r1, [r4, #0]
 8004bfa:	3503      	adds	r5, #3
 8004bfc:	1a6d      	subs	r5, r5, r1
 8004bfe:	f025 0503 	bic.w	r5, r5, #3
 8004c02:	3508      	adds	r5, #8
 8004c04:	2d0c      	cmp	r5, #12
 8004c06:	bf38      	it	cc
 8004c08:	250c      	movcc	r5, #12
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	f7ff ffa5 	bl	8004b5c <sbrk_aligned>
 8004c12:	3001      	adds	r0, #1
 8004c14:	d02b      	beq.n	8004c6e <_malloc_r+0xd2>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	442b      	add	r3, r5
 8004c1a:	6023      	str	r3, [r4, #0]
 8004c1c:	e00e      	b.n	8004c3c <_malloc_r+0xa0>
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	1b52      	subs	r2, r2, r5
 8004c22:	d41e      	bmi.n	8004c62 <_malloc_r+0xc6>
 8004c24:	2a0b      	cmp	r2, #11
 8004c26:	d916      	bls.n	8004c56 <_malloc_r+0xba>
 8004c28:	1961      	adds	r1, r4, r5
 8004c2a:	42a3      	cmp	r3, r4
 8004c2c:	6025      	str	r5, [r4, #0]
 8004c2e:	bf18      	it	ne
 8004c30:	6059      	strne	r1, [r3, #4]
 8004c32:	6863      	ldr	r3, [r4, #4]
 8004c34:	bf08      	it	eq
 8004c36:	6031      	streq	r1, [r6, #0]
 8004c38:	5162      	str	r2, [r4, r5]
 8004c3a:	604b      	str	r3, [r1, #4]
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	f104 060b 	add.w	r6, r4, #11
 8004c42:	f000 f865 	bl	8004d10 <__malloc_unlock>
 8004c46:	f026 0607 	bic.w	r6, r6, #7
 8004c4a:	1d23      	adds	r3, r4, #4
 8004c4c:	1af2      	subs	r2, r6, r3
 8004c4e:	d0b6      	beq.n	8004bbe <_malloc_r+0x22>
 8004c50:	1b9b      	subs	r3, r3, r6
 8004c52:	50a3      	str	r3, [r4, r2]
 8004c54:	e7b3      	b.n	8004bbe <_malloc_r+0x22>
 8004c56:	6862      	ldr	r2, [r4, #4]
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	bf0c      	ite	eq
 8004c5c:	6032      	streq	r2, [r6, #0]
 8004c5e:	605a      	strne	r2, [r3, #4]
 8004c60:	e7ec      	b.n	8004c3c <_malloc_r+0xa0>
 8004c62:	4623      	mov	r3, r4
 8004c64:	6864      	ldr	r4, [r4, #4]
 8004c66:	e7b2      	b.n	8004bce <_malloc_r+0x32>
 8004c68:	4634      	mov	r4, r6
 8004c6a:	6876      	ldr	r6, [r6, #4]
 8004c6c:	e7b9      	b.n	8004be2 <_malloc_r+0x46>
 8004c6e:	230c      	movs	r3, #12
 8004c70:	4638      	mov	r0, r7
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	f000 f84c 	bl	8004d10 <__malloc_unlock>
 8004c78:	e7a1      	b.n	8004bbe <_malloc_r+0x22>
 8004c7a:	6025      	str	r5, [r4, #0]
 8004c7c:	e7de      	b.n	8004c3c <_malloc_r+0xa0>
 8004c7e:	bf00      	nop
 8004c80:	20000248 	.word	0x20000248

08004c84 <_realloc_r>:
 8004c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c88:	4680      	mov	r8, r0
 8004c8a:	4614      	mov	r4, r2
 8004c8c:	460e      	mov	r6, r1
 8004c8e:	b921      	cbnz	r1, 8004c9a <_realloc_r+0x16>
 8004c90:	4611      	mov	r1, r2
 8004c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c96:	f7ff bf81 	b.w	8004b9c <_malloc_r>
 8004c9a:	b92a      	cbnz	r2, 8004ca8 <_realloc_r+0x24>
 8004c9c:	f7ff ff16 	bl	8004acc <_free_r>
 8004ca0:	4625      	mov	r5, r4
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca8:	f000 f838 	bl	8004d1c <_malloc_usable_size_r>
 8004cac:	4284      	cmp	r4, r0
 8004cae:	4607      	mov	r7, r0
 8004cb0:	d802      	bhi.n	8004cb8 <_realloc_r+0x34>
 8004cb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cb6:	d812      	bhi.n	8004cde <_realloc_r+0x5a>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4640      	mov	r0, r8
 8004cbc:	f7ff ff6e 	bl	8004b9c <_malloc_r>
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d0ed      	beq.n	8004ca2 <_realloc_r+0x1e>
 8004cc6:	42bc      	cmp	r4, r7
 8004cc8:	4622      	mov	r2, r4
 8004cca:	4631      	mov	r1, r6
 8004ccc:	bf28      	it	cs
 8004cce:	463a      	movcs	r2, r7
 8004cd0:	f7ff fed4 	bl	8004a7c <memcpy>
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	f7ff fef8 	bl	8004acc <_free_r>
 8004cdc:	e7e1      	b.n	8004ca2 <_realloc_r+0x1e>
 8004cde:	4635      	mov	r5, r6
 8004ce0:	e7df      	b.n	8004ca2 <_realloc_r+0x1e>
	...

08004ce4 <_sbrk_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	4d05      	ldr	r5, [pc, #20]	; (8004d00 <_sbrk_r+0x1c>)
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	f7fb ff18 	bl	8000b24 <_sbrk>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_sbrk_r+0x1a>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_sbrk_r+0x1a>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	20000250 	.word	0x20000250

08004d04 <__malloc_lock>:
 8004d04:	4801      	ldr	r0, [pc, #4]	; (8004d0c <__malloc_lock+0x8>)
 8004d06:	f000 b811 	b.w	8004d2c <__retarget_lock_acquire_recursive>
 8004d0a:	bf00      	nop
 8004d0c:	20000254 	.word	0x20000254

08004d10 <__malloc_unlock>:
 8004d10:	4801      	ldr	r0, [pc, #4]	; (8004d18 <__malloc_unlock+0x8>)
 8004d12:	f000 b80c 	b.w	8004d2e <__retarget_lock_release_recursive>
 8004d16:	bf00      	nop
 8004d18:	20000254 	.word	0x20000254

08004d1c <_malloc_usable_size_r>:
 8004d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d20:	1f18      	subs	r0, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bfbc      	itt	lt
 8004d26:	580b      	ldrlt	r3, [r1, r0]
 8004d28:	18c0      	addlt	r0, r0, r3
 8004d2a:	4770      	bx	lr

08004d2c <__retarget_lock_acquire_recursive>:
 8004d2c:	4770      	bx	lr

08004d2e <__retarget_lock_release_recursive>:
 8004d2e:	4770      	bx	lr

08004d30 <_init>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr

08004d3c <_fini>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr
